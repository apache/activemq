/**
 *
 * Copyright 2005-2006 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.activemq.openwire.tool.OpenWireCppClassesScript

/**
 * Generates the C++ commands for the Open Wire Format
 *
 * @version $Revision$
 */
class GenerateCppClasses extends OpenWireCppClassesScript {

	void generateFile(PrintWriter out) {
                out << """/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "activemq/command/${className}.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Command and marshalling code for OpenWire format for ${className}
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
${className}::${className}()
{"""
    for (property in properties) {
        def value = toCppDefaultValue(property.type)
        def propertyName = property.simpleName
        def parameterName = decapitalize(propertyName)
        out << """
    this->${parameterName} = ${value} ;"""
    }
    out << """
}

${className}::~${className}()
{
}

unsigned char ${className}::getDataStructureType()
{
    return ${className}::TYPE ; 
}
"""
    for (property in properties) {
        def type = toCppType(property.type)
        def propertyName = property.simpleName
        def parameterName = decapitalize(propertyName)
        out << """
        
${type} ${className}::get${propertyName}()
{
    return ${parameterName} ;
}

void ${className}::set${propertyName}(${type} ${parameterName})
{
    this->${parameterName} = ${parameterName} ;
}
"""
    }
out << """
int ${className}::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)
{
    int size = 0 ;

    size += ${baseClass}::marshal(marshaller, mode, ostream) ; """
    for (property in properties) {
        def marshalMethod = toMarshalMethodName(property.type)
        def propertyName = decapitalize(property.simpleName)
        out << """
    size += marshaller->${marshalMethod}(${propertyName}, mode, ostream) ; """
    }
out << """
    return size ;
}

void ${className}::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)
{
    ${baseClass}::unmarshal(marshaller, mode, istream) ; """
    for (property in properties) {
        def cast = toUnmarshalCast(property.type)
        def unmarshalMethod = toUnmarshalMethodName(property.type)
        def propertyName = decapitalize(property.simpleName)
        out << """
    ${propertyName} = ${cast}(marshaller->${unmarshalMethod}(mode, istream)) ; """
    }
out << """
}
"""
    }
}
