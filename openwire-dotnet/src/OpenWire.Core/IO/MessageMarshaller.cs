//
// Marshalling code for Open Wire Format for Message
//
//
// NOTE!: This file is autogenerated - do not modify!
//        if you need to make a change, please see the Groovy scripts in the
//        activemq-openwire module
//

using System;
using System.Collections;
using System.IO;

using OpenWire.Core;
using OpenWire.Core.Commands;
using OpenWire.Core.IO;

namespace OpenWire.Core.IO
{
    public class MessageMarshaller : AbstractCommandMarshaller
    {

        public override Command CreateCommand() {
            return new Message();
        }

        public override void BuildCommand(Command command, BinaryReader dataIn) {
            base.BuildCommand(command, dataIn);
            Message info = (Message) command;
            info.setProducerId((org.apache.activemq.command.ProducerId) readObject(dataIn));
            info.setDestination((org.apache.activemq.command.ActiveMQDestination) readObject(dataIn));
            info.setTransactionId((org.apache.activemq.command.TransactionId) readObject(dataIn));
            info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) readObject(dataIn));
            info.setMessageId((org.apache.activemq.command.MessageId) readObject(dataIn));
            info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) readObject(dataIn));
            info.setGroupID(dataIn.readUTF());
            info.setGroupSequence(dataIn.readInt());
            info.setCorrelationId(dataIn.readUTF());
            info.setPersistent(dataIn.readBoolean());
            info.setExpiration(dataIn.readLong());
            info.setPriority(dataIn.readByte());
            info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) readObject(dataIn));
            info.setTimestamp(dataIn.readLong());
            info.setType(dataIn.readUTF());
            info.setContent((org.activeio.ByteSequence) readObject(dataIn));
            info.setMarshalledProperties((org.activeio.ByteSequence) readObject(dataIn));
            info.setDataStructure((org.apache.activemq.command.DataStructure) readObject(dataIn));
            info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) readObject(dataIn));
            info.setCompressed(dataIn.readBoolean());
            info.setRedeliveryCounter(dataIn.readInt());
            info.setBrokerPath((org.apache.activemq.command.BrokerId[]) readObject(dataIn));
            info.setArrival(dataIn.readLong());
            info.setUserID(dataIn.readUTF());
            info.setRecievedByDFBridge(dataIn.readBoolean());

        }

        public override void WriteCommand(Command command, BinaryWriter dataOut) {
            base.WriteCommand(command, dataOut);
            Message info = (Message) command;
            writeObject(info.getProducerId(), dataOut);
            writeObject(info.getDestination(), dataOut);
            writeObject(info.getTransactionId(), dataOut);
            writeObject(info.getOriginalDestination(), dataOut);
            writeObject(info.getMessageId(), dataOut);
            writeObject(info.getOriginalTransactionId(), dataOut);
            writeUTF(info.getGroupID(), dataOut);
            dataOut.writeInt(info.getGroupSequence());
            writeUTF(info.getCorrelationId(), dataOut);
            dataOut.writeBoolean(info.isPersistent());
            dataOut.writeLong(info.getExpiration());
            dataOut.writeByte(info.getPriority());
            writeObject(info.getReplyTo(), dataOut);
            dataOut.writeLong(info.getTimestamp());
            writeUTF(info.getType(), dataOut);
            writeObject(info.getContent(), dataOut);
            writeObject(info.getMarshalledProperties(), dataOut);
            writeObject(info.getDataStructure(), dataOut);
            writeObject(info.getTargetConsumerId(), dataOut);
            dataOut.writeBoolean(info.isCompressed());
            dataOut.writeInt(info.getRedeliveryCounter());
            writeObject(info.getBrokerPath(), dataOut);
            dataOut.writeLong(info.getArrival());
            writeUTF(info.getUserID(), dataOut);
            dataOut.writeBoolean(info.isRecievedByDFBridge());

        }
    }
}
