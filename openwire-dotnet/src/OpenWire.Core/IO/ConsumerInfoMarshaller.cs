//
// Marshalling code for Open Wire Format for ConsumerInfo
//
//
// NOTE!: This file is autogenerated - do not modify!
//        if you need to make a change, please see the Groovy scripts in the
//        activemq-openwire module
//

using System;
using System.Collections;
using System.IO;

using OpenWire.Core;
using OpenWire.Core.Commands;
using OpenWire.Core.IO;

namespace OpenWire.Core.IO
{
    public class ConsumerInfoMarshaller : AbstractCommandMarshaller
    {


        public override Command CreateCommand() {
            return new ConsumerInfo();
        }

        public override void BuildCommand(Command command, BinaryReader dataIn) {
            base.BuildCommand(command, dataIn);

            ConsumerInfo info = (ConsumerInfo) command;
            info.ConsumerId = ReadConsumerId(dataIn);
            info.Browser = dataIn.ReadBoolean();
            info.Destination = ReadDestination(dataIn);
            info.PrefetchSize = dataIn.ReadInt32();
            info.DispatchAsync = dataIn.ReadBoolean();
            info.Selector = dataIn.ReadString();
            info.SubcriptionName = dataIn.ReadString();
            info.NoLocal = dataIn.ReadBoolean();
            info.Exclusive = dataIn.ReadBoolean();
            info.Retroactive = dataIn.ReadBoolean();
            info.Priority = dataIn.ReadByte();
            info.BrokerPath = ReadBrokerIds(dataIn);
            info.NetworkSubscription = dataIn.ReadBoolean();

        }

        public override void WriteCommand(Command command, BinaryWriter dataOut) {
            base.WriteCommand(command, dataOut);

            ConsumerInfo info = (ConsumerInfo) command;
            WriteConsumerId(info.ConsumerId, dataOut);
            dataOut.Write(info.Browser);
            WriteDestination(info.Destination, dataOut);
            dataOut.Write(info.PrefetchSize);
            dataOut.Write(info.DispatchAsync);
            dataOut.Write(info.Selector);
            dataOut.Write(info.SubcriptionName);
            dataOut.Write(info.NoLocal);
            dataOut.Write(info.Exclusive);
            dataOut.Write(info.Retroactive);
            dataOut.Write(info.Priority);
            dataOut.WriteBrokerIds(info.BrokerPath);
            dataOut.Write(info.NetworkSubscription);

        }
    }
}
