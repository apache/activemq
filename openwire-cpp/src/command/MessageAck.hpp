/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef MessageAck_hpp_
#define MessageAck_hpp_

#include <string>
#include "command/BaseCommand.hpp"
    
#include "command/ActiveMQDestination.hpp"
#include "command/TransactionId.hpp"
#include "command/ConsumerId.hpp"
#include "command/MessageId.hpp"
#include "command/MessageId.hpp"

#include "util/ifr/ap"
#include "util/ifr/p"

namespace apache
{
  namespace activemq
  {
    namespace client
    {
      namespace command
      {
        using namespace ifr;
        using namespace std;
        using namespace apache::activemq::client;

/*
 *
 *  Marshalling code for Open Wire Format for MessageAck
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
class MessageAck : public BaseCommand
{
private:
    p<ActiveMQDestination> destination ;
    p<TransactionId> transactionId ;
    p<ConsumerId> consumerId ;
    char ackType ;
    p<MessageId> firstMessageId ;
    p<MessageId> lastMessageId ;
    int messageCount ;

public:
    const static int TYPE = 22;

public:
    MessageAck() ;
    virtual ~MessageAck() ;

    virtual int getCommandType() ;

    virtual p<ActiveMQDestination> getDestination() ;
    virtual void setDestination(p<ActiveMQDestination> destination) ;

    virtual p<TransactionId> getTransactionId() ;
    virtual void setTransactionId(p<TransactionId> transactionId) ;

    virtual p<ConsumerId> getConsumerId() ;
    virtual void setConsumerId(p<ConsumerId> consumerId) ;

    virtual char getAckType() ;
    virtual void setAckType(char ackType) ;

    virtual p<MessageId> getFirstMessageId() ;
    virtual void setFirstMessageId(p<MessageId> firstMessageId) ;

    virtual p<MessageId> getLastMessageId() ;
    virtual void setLastMessageId(p<MessageId> lastMessageId) ;

    virtual int getMessageCount() ;
    virtual void setMessageCount(int messageCount) ;


} ;

/* namespace */
      }
    }
  }
}

#endif /*MessageAck_hpp_*/
