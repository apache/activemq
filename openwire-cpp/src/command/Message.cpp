/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "command/Message.hpp"

using namespace apache::activemq::client::command;

/*
 *
 *  Marshalling code for Open Wire Format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
Message::Message()
{
    this->producerId = NULL ;
    this->destination = NULL ;
    this->transactionId = NULL ;
    this->originalDestination = NULL ;
    this->messageId = NULL ;
    this->originalTransactionId = NULL ;
    this->groupID = NULL ;
    this->groupSequence = NULL ;
    this->correlationId = NULL ;
    this->persistent = NULL ;
    this->expiration = NULL ;
    this->priority = NULL ;
    this->replyTo = NULL ;
    this->timestamp = NULL ;
    this->type = NULL ;
    this->content = NULL ;
    this->marshalledProperties = NULL ;
    this->dataStructure = NULL ;
    this->targetConsumerId = NULL ;
    this->compressed = NULL ;
    this->redeliveryCounter = NULL ;
    this->brokerPath = NULL ;
    this->arrival = NULL ;
    this->userID = NULL ;
    this->recievedByDFBridge = NULL ;
}

Message::~Message()
{
}

        
p<ProducerId> Message::getProducerId()
{
    return producerId ;
}

void Message::setProducerId(p<ProducerId> producerId)
{
    this->producerId = producerId ;
}

        
ActiveMQDestination Message::getDestination()
{
    return destination ;
}

void Message::setDestination(ActiveMQDestination destination)
{
    this->destination = destination ;
}

        
p<TransactionId> Message::getTransactionId()
{
    return transactionId ;
}

void Message::setTransactionId(p<TransactionId> transactionId)
{
    this->transactionId = transactionId ;
}

        
ActiveMQDestination Message::getOriginalDestination()
{
    return originalDestination ;
}

void Message::setOriginalDestination(ActiveMQDestination originalDestination)
{
    this->originalDestination = originalDestination ;
}

        
p<MessageId> Message::getMessageId()
{
    return messageId ;
}

void Message::setMessageId(p<MessageId> messageId)
{
    this->messageId = messageId ;
}

        
p<TransactionId> Message::getOriginalTransactionId()
{
    return originalTransactionId ;
}

void Message::setOriginalTransactionId(p<TransactionId> originalTransactionId)
{
    this->originalTransactionId = originalTransactionId ;
}

        
p<string> Message::getGroupID()
{
    return groupID ;
}

void Message::setGroupID(p<string> groupID)
{
    this->groupID = groupID ;
}

        
int Message::getGroupSequence()
{
    return groupSequence ;
}

void Message::setGroupSequence(int groupSequence)
{
    this->groupSequence = groupSequence ;
}

        
p<string> Message::getCorrelationId()
{
    return correlationId ;
}

void Message::setCorrelationId(p<string> correlationId)
{
    this->correlationId = correlationId ;
}

        
bool Message::getPersistent()
{
    return persistent ;
}

void Message::setPersistent(bool persistent)
{
    this->persistent = persistent ;
}

        
long Message::getExpiration()
{
    return expiration ;
}

void Message::setExpiration(long expiration)
{
    this->expiration = expiration ;
}

        
byte Message::getPriority()
{
    return priority ;
}

void Message::setPriority(byte priority)
{
    this->priority = priority ;
}

        
ActiveMQDestination Message::getReplyTo()
{
    return replyTo ;
}

void Message::setReplyTo(ActiveMQDestination replyTo)
{
    this->replyTo = replyTo ;
}

        
long Message::getTimestamp()
{
    return timestamp ;
}

void Message::setTimestamp(long timestamp)
{
    this->timestamp = timestamp ;
}

        
p<string> Message::getType()
{
    return type ;
}

void Message::setType(p<string> type)
{
    this->type = type ;
}

        
void* Message::getContent()
{
    return content ;
}

void Message::setContent(void* content)
{
    this->content = content ;
}

        
void* Message::getMarshalledProperties()
{
    return marshalledProperties ;
}

void Message::setMarshalledProperties(void* marshalledProperties)
{
    this->marshalledProperties = marshalledProperties ;
}

        
DataStructure Message::getDataStructure()
{
    return dataStructure ;
}

void Message::setDataStructure(DataStructure dataStructure)
{
    this->dataStructure = dataStructure ;
}

        
p<ConsumerId> Message::getTargetConsumerId()
{
    return targetConsumerId ;
}

void Message::setTargetConsumerId(p<ConsumerId> targetConsumerId)
{
    this->targetConsumerId = targetConsumerId ;
}

        
bool Message::getCompressed()
{
    return compressed ;
}

void Message::setCompressed(bool compressed)
{
    this->compressed = compressed ;
}

        
int Message::getRedeliveryCounter()
{
    return redeliveryCounter ;
}

void Message::setRedeliveryCounter(int redeliveryCounter)
{
    this->redeliveryCounter = redeliveryCounter ;
}

        
BrokerId[] Message::getBrokerPath()
{
    return brokerPath ;
}

void Message::setBrokerPath(BrokerId[] brokerPath)
{
    this->brokerPath = brokerPath ;
}

        
long Message::getArrival()
{
    return arrival ;
}

void Message::setArrival(long arrival)
{
    this->arrival = arrival ;
}

        
p<string> Message::getUserID()
{
    return userID ;
}

void Message::setUserID(p<string> userID)
{
    this->userID = userID ;
}

        
bool Message::getRecievedByDFBridge()
{
    return recievedByDFBridge ;
}

void Message::setRecievedByDFBridge(bool recievedByDFBridge)
{
    this->recievedByDFBridge = recievedByDFBridge ;
}
