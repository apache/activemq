/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef Message_hpp_
#define Message_hpp_

#include <string>
#include "command/BaseCommand.hpp"
    
#include "command/ProducerId.hpp"
#include "command/ActiveMQDestination.hpp"
#include "command/TransactionId.hpp"
#include "command/ActiveMQDestination.hpp"
#include "command/MessageId.hpp"
#include "command/TransactionId.hpp"
#include "command/ActiveMQDestination.hpp"
#include "command/IDataStructure.hpp"
#include "command/ConsumerId.hpp"
#include "command/BrokerId.hpp"

#include "util/ifr/ap.hpp"
#include "util/ifr/p.hpp"

namespace apache
{
  namespace activemq
  {
    namespace client
    {
      namespace command
      {
        using namespace ifr;
        using namespace std;
        using namespace apache::activemq::client;

/*
 *
 *  Marshalling code for Open Wire Format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
class Message : public BaseCommand
{
private:
    p<ProducerId> producerId ;
    p<ActiveMQDestination> destination ;
    p<TransactionId> transactionId ;
    p<ActiveMQDestination> originalDestination ;
    p<MessageId> messageId ;
    p<TransactionId> originalTransactionId ;
    p<string> groupID ;
    int groupSequence ;
    p<string> correlationId ;
    bool persistent ;
    long long expiration ;
    char priority ;
    p<ActiveMQDestination> replyTo ;
    long long timestamp ;
    p<string> type ;
    char* content ;
    char* marshalledProperties ;
    p<IDataStructure> dataStructure ;
    p<ConsumerId> targetConsumerId ;
    bool compressed ;
    int redeliveryCounter ;
    ap<BrokerId> brokerPath ;
    long long arrival ;
    p<string> userID ;
    bool recievedByDFBridge ;

public:
    const static int TYPE = 0;

public:
    Message() ;
    virtual ~Message() ;

    virtual int getCommandType() ;

    virtual p<ProducerId> getProducerId() ;
    virtual void setProducerId(p<ProducerId> producerId) ;

    virtual p<ActiveMQDestination> getDestination() ;
    virtual void setDestination(p<ActiveMQDestination> destination) ;

    virtual p<TransactionId> getTransactionId() ;
    virtual void setTransactionId(p<TransactionId> transactionId) ;

    virtual p<ActiveMQDestination> getOriginalDestination() ;
    virtual void setOriginalDestination(p<ActiveMQDestination> originalDestination) ;

    virtual p<MessageId> getMessageId() ;
    virtual void setMessageId(p<MessageId> messageId) ;

    virtual p<TransactionId> getOriginalTransactionId() ;
    virtual void setOriginalTransactionId(p<TransactionId> originalTransactionId) ;

    virtual p<string> getGroupID() ;
    virtual void setGroupID(p<string> groupID) ;

    virtual int getGroupSequence() ;
    virtual void setGroupSequence(int groupSequence) ;

    virtual p<string> getCorrelationId() ;
    virtual void setCorrelationId(p<string> correlationId) ;

    virtual bool getPersistent() ;
    virtual void setPersistent(bool persistent) ;

    virtual long long getExpiration() ;
    virtual void setExpiration(long long expiration) ;

    virtual char getPriority() ;
    virtual void setPriority(char priority) ;

    virtual p<ActiveMQDestination> getReplyTo() ;
    virtual void setReplyTo(p<ActiveMQDestination> replyTo) ;

    virtual long long getTimestamp() ;
    virtual void setTimestamp(long long timestamp) ;

    virtual p<string> getType() ;
    virtual void setType(p<string> type) ;

    virtual char* getContent() ;
    virtual void setContent(char* content) ;

    virtual char* getMarshalledProperties() ;
    virtual void setMarshalledProperties(char* marshalledProperties) ;

    virtual p<IDataStructure> getDataStructure() ;
    virtual void setDataStructure(p<IDataStructure> dataStructure) ;

    virtual p<ConsumerId> getTargetConsumerId() ;
    virtual void setTargetConsumerId(p<ConsumerId> targetConsumerId) ;

    virtual bool getCompressed() ;
    virtual void setCompressed(bool compressed) ;

    virtual int getRedeliveryCounter() ;
    virtual void setRedeliveryCounter(int redeliveryCounter) ;

    virtual ap<BrokerId> getBrokerPath() ;
    virtual void setBrokerPath(ap<BrokerId> brokerPath) ;

    virtual long long getArrival() ;
    virtual void setArrival(long long arrival) ;

    virtual p<string> getUserID() ;
    virtual void setUserID(p<string> userID) ;

    virtual bool getRecievedByDFBridge() ;
    virtual void setRecievedByDFBridge(bool recievedByDFBridge) ;


} ;

/* namespace */
      }
    }
  }
}

#endif /*Message_hpp_*/
