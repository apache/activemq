/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef Message_hpp_
#define Message_hpp_

#include <string>

/* we could cut this down  - for now include all possible headers */
#include "command/BaseCommand.hpp"
#include "command/BrokerId.hpp"
#include "command/ConnectionId.hpp"
#include "command/ConsumerId.hpp"
#include "command/ProducerId.hpp"
#include "command/SessionId.hpp"

#include "command/BaseCommand.hpp"
#include "util/ifr/p"

namespace apache
{
  namespace activemq
  {
    namespace client
    {
      namespace command
      {
        using namespace ifr;
        using namespace apache::activemq::client;

/*
 *
 *  Marshalling code for Open Wire Format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
class Message : public BaseCommand
{
private:
    p<ProducerId> producerId ;
    ActiveMQDestination destination ;
    p<TransactionId> transactionId ;
    ActiveMQDestination originalDestination ;
    p<MessageId> messageId ;
    p<TransactionId> originalTransactionId ;
    p<string> groupID ;
    int groupSequence ;
    p<string> correlationId ;
    bool persistent ;
    long expiration ;
    byte priority ;
    ActiveMQDestination replyTo ;
    long timestamp ;
    p<string> type ;
    void* content ;
    void* marshalledProperties ;
    DataStructure dataStructure ;
    p<ConsumerId> targetConsumerId ;
    bool compressed ;
    int redeliveryCounter ;
    BrokerId[] brokerPath ;
    long arrival ;
    p<string> userID ;
    bool recievedByDFBridge ;

public:
    const static int TYPE = 0;

public:
    Message() ;
    virtual ~Message() ;


    virtual p<ProducerId> getProducerId() ;
    virtual void setProducerId(p<ProducerId> producerId) ;

    virtual ActiveMQDestination getDestination() ;
    virtual void setDestination(ActiveMQDestination destination) ;

    virtual p<TransactionId> getTransactionId() ;
    virtual void setTransactionId(p<TransactionId> transactionId) ;

    virtual ActiveMQDestination getOriginalDestination() ;
    virtual void setOriginalDestination(ActiveMQDestination originalDestination) ;

    virtual p<MessageId> getMessageId() ;
    virtual void setMessageId(p<MessageId> messageId) ;

    virtual p<TransactionId> getOriginalTransactionId() ;
    virtual void setOriginalTransactionId(p<TransactionId> originalTransactionId) ;

    virtual p<string> getGroupID() ;
    virtual void setGroupID(p<string> groupID) ;

    virtual int getGroupSequence() ;
    virtual void setGroupSequence(int groupSequence) ;

    virtual p<string> getCorrelationId() ;
    virtual void setCorrelationId(p<string> correlationId) ;

    virtual bool getPersistent() ;
    virtual void setPersistent(bool persistent) ;

    virtual long getExpiration() ;
    virtual void setExpiration(long expiration) ;

    virtual byte getPriority() ;
    virtual void setPriority(byte priority) ;

    virtual ActiveMQDestination getReplyTo() ;
    virtual void setReplyTo(ActiveMQDestination replyTo) ;

    virtual long getTimestamp() ;
    virtual void setTimestamp(long timestamp) ;

    virtual p<string> getType() ;
    virtual void setType(p<string> type) ;

    virtual void* getContent() ;
    virtual void setContent(void* content) ;

    virtual void* getMarshalledProperties() ;
    virtual void setMarshalledProperties(void* marshalledProperties) ;

    virtual DataStructure getDataStructure() ;
    virtual void setDataStructure(DataStructure dataStructure) ;

    virtual p<ConsumerId> getTargetConsumerId() ;
    virtual void setTargetConsumerId(p<ConsumerId> targetConsumerId) ;

    virtual bool getCompressed() ;
    virtual void setCompressed(bool compressed) ;

    virtual int getRedeliveryCounter() ;
    virtual void setRedeliveryCounter(int redeliveryCounter) ;

    virtual BrokerId[] getBrokerPath() ;
    virtual void setBrokerPath(BrokerId[] brokerPath) ;

    virtual long getArrival() ;
    virtual void setArrival(long arrival) ;

    virtual p<string> getUserID() ;
    virtual void setUserID(p<string> userID) ;

    virtual bool getRecievedByDFBridge() ;
    virtual void setRecievedByDFBridge(bool recievedByDFBridge) ;


} ;

/* namespace */
      }
    }
  }
}

#endif /*Message_hpp_*/
