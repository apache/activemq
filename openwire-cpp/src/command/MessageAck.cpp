/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "command/MessageAck.hpp"

using namespace apache::activemq::client::command;

/*
 *
 *  Marshalling code for Open Wire Format for MessageAck
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
MessageAck::MessageAck()
{
    this->destination = 0 ;
    this->transactionId = 0 ;
    this->consumerId = 0 ;
    this->ackType = 0 ;
    this->firstMessageId = 0 ;
    this->lastMessageId = 0 ;
    this->messageCount = 0 ;
}

MessageAck::~MessageAck()
{
}

        
p<ActiveMQDestination> MessageAck::getDestination()
{
    return destination ;
}

void MessageAck::setDestination(p<ActiveMQDestination> destination)
{
    this->destination = destination ;
}

        
p<TransactionId> MessageAck::getTransactionId()
{
    return transactionId ;
}

void MessageAck::setTransactionId(p<TransactionId> transactionId)
{
    this->transactionId = transactionId ;
}

        
p<ConsumerId> MessageAck::getConsumerId()
{
    return consumerId ;
}

void MessageAck::setConsumerId(p<ConsumerId> consumerId)
{
    this->consumerId = consumerId ;
}

        
char MessageAck::getAckType()
{
    return ackType ;
}

void MessageAck::setAckType(char ackType)
{
    this->ackType = ackType ;
}

        
p<MessageId> MessageAck::getFirstMessageId()
{
    return firstMessageId ;
}

void MessageAck::setFirstMessageId(p<MessageId> firstMessageId)
{
    this->firstMessageId = firstMessageId ;
}

        
p<MessageId> MessageAck::getLastMessageId()
{
    return lastMessageId ;
}

void MessageAck::setLastMessageId(p<MessageId> lastMessageId)
{
    this->lastMessageId = lastMessageId ;
}

        
int MessageAck::getMessageCount()
{
    return messageCount ;
}

void MessageAck::setMessageCount(int messageCount)
{
    this->messageCount = messageCount ;
}
