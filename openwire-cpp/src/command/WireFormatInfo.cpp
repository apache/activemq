/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "command/WireFormatInfo.hpp"

using namespace apache::activemq::client::command;

/*
 *
 *  Marshalling code for Open Wire Format for WireFormatInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
WireFormatInfo::WireFormatInfo()
{
    this->magic = NULL ;
    this->version = NULL ;
    this->cacheEnabled = NULL ;
    this->stackTraceEnabled = NULL ;
    this->tcpNoDelayEnabled = NULL ;
    this->prefixPacketSize = NULL ;
    this->tightEncodingEnabled = NULL ;
}

WireFormatInfo::~WireFormatInfo()
{
}

        
byte[] WireFormatInfo::getMagic()
{
    return magic ;
}

void WireFormatInfo::setMagic(byte[] magic)
{
    this->magic = magic ;
}

        
int WireFormatInfo::getVersion()
{
    return version ;
}

void WireFormatInfo::setVersion(int version)
{
    this->version = version ;
}

        
bool WireFormatInfo::getCacheEnabled()
{
    return cacheEnabled ;
}

void WireFormatInfo::setCacheEnabled(bool cacheEnabled)
{
    this->cacheEnabled = cacheEnabled ;
}

        
bool WireFormatInfo::getStackTraceEnabled()
{
    return stackTraceEnabled ;
}

void WireFormatInfo::setStackTraceEnabled(bool stackTraceEnabled)
{
    this->stackTraceEnabled = stackTraceEnabled ;
}

        
bool WireFormatInfo::getTcpNoDelayEnabled()
{
    return tcpNoDelayEnabled ;
}

void WireFormatInfo::setTcpNoDelayEnabled(bool tcpNoDelayEnabled)
{
    this->tcpNoDelayEnabled = tcpNoDelayEnabled ;
}

        
bool WireFormatInfo::getPrefixPacketSize()
{
    return prefixPacketSize ;
}

void WireFormatInfo::setPrefixPacketSize(bool prefixPacketSize)
{
    this->prefixPacketSize = prefixPacketSize ;
}

        
bool WireFormatInfo::getTightEncodingEnabled()
{
    return tightEncodingEnabled ;
}

void WireFormatInfo::setTightEncodingEnabled(bool tightEncodingEnabled)
{
    this->tightEncodingEnabled = tightEncodingEnabled ;
}
