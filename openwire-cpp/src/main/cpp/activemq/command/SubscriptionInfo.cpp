/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "activemq/command/SubscriptionInfo.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Command and marshalling code for OpenWire format for SubscriptionInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
SubscriptionInfo::SubscriptionInfo()
{
    this->clientId = NULL ;
    this->destination = NULL ;
    this->selector = NULL ;
    this->subcriptionName = NULL ;
}

SubscriptionInfo::~SubscriptionInfo()
{
}

unsigned char SubscriptionInfo::getDataStructureType()
{
    return SubscriptionInfo::TYPE ; 
}

        
p<string> SubscriptionInfo::getClientId()
{
    return clientId ;
}

void SubscriptionInfo::setClientId(p<string> clientId)
{
    this->clientId = clientId ;
}

        
p<ActiveMQDestination> SubscriptionInfo::getDestination()
{
    return destination ;
}

void SubscriptionInfo::setDestination(p<ActiveMQDestination> destination)
{
    this->destination = destination ;
}

        
p<string> SubscriptionInfo::getSelector()
{
    return selector ;
}

void SubscriptionInfo::setSelector(p<string> selector)
{
    this->selector = selector ;
}

        
p<string> SubscriptionInfo::getSubcriptionName()
{
    return subcriptionName ;
}

void SubscriptionInfo::setSubcriptionName(p<string> subcriptionName)
{
    this->subcriptionName = subcriptionName ;
}

int SubscriptionInfo::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)
{
    int size = 0 ;

    size += BaseDataStructure::marshal(marshaller, mode, ostream) ; 
    size += marshaller->marshalString(clientId, mode, ostream) ; 
    size += marshaller->marshalObject(destination, mode, ostream) ; 
    size += marshaller->marshalString(selector, mode, ostream) ; 
    size += marshaller->marshalString(subcriptionName, mode, ostream) ; 
    return size ;
}

void SubscriptionInfo::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)
{
    BaseDataStructure::unmarshal(marshaller, mode, istream) ; 
    clientId = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    destination = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, istream)) ; 
    selector = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    subcriptionName = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
}
