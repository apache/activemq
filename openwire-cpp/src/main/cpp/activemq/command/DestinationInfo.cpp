/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "activemq/command/DestinationInfo.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Command and marshalling code for OpenWire format for DestinationInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
DestinationInfo::DestinationInfo()
{
    this->connectionId = NULL ;
    this->destination = NULL ;
    this->operationType = 0 ;
    this->timeout = 0 ;
    this->brokerPath = NULL ;
}

DestinationInfo::~DestinationInfo()
{
}

unsigned char DestinationInfo::getDataStructureType()
{
    return DestinationInfo::TYPE ; 
}

        
p<ConnectionId> DestinationInfo::getConnectionId()
{
    return connectionId ;
}

void DestinationInfo::setConnectionId(p<ConnectionId> connectionId)
{
    this->connectionId = connectionId ;
}

        
p<ActiveMQDestination> DestinationInfo::getDestination()
{
    return destination ;
}

void DestinationInfo::setDestination(p<ActiveMQDestination> destination)
{
    this->destination = destination ;
}

        
char DestinationInfo::getOperationType()
{
    return operationType ;
}

void DestinationInfo::setOperationType(char operationType)
{
    this->operationType = operationType ;
}

        
long long DestinationInfo::getTimeout()
{
    return timeout ;
}

void DestinationInfo::setTimeout(long long timeout)
{
    this->timeout = timeout ;
}

        
array<BrokerId> DestinationInfo::getBrokerPath()
{
    return brokerPath ;
}

void DestinationInfo::setBrokerPath(array<BrokerId> brokerPath)
{
    this->brokerPath = brokerPath ;
}

int DestinationInfo::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)
{
    int size = 0 ;

    size += BaseCommand::marshal(marshaller, mode, ostream) ; 
    size += marshaller->marshalObject(connectionId, mode, ostream) ; 
    size += marshaller->marshalObject(destination, mode, ostream) ; 
    size += marshaller->marshalByte(operationType, mode, ostream) ; 
    size += marshaller->marshalLong(timeout, mode, ostream) ; 
    size += marshaller->marshalObjectArray(brokerPath, mode, ostream) ; 
    return size ;
}

void DestinationInfo::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)
{
    BaseCommand::unmarshal(marshaller, mode, istream) ; 
    connectionId = p_cast<ConnectionId>(marshaller->unmarshalObject(mode, istream)) ; 
    destination = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, istream)) ; 
    operationType = (marshaller->unmarshalByte(mode, istream)) ; 
    timeout = (marshaller->unmarshalLong(mode, istream)) ; 
    brokerPath = array_cast<BrokerId>(marshaller->unmarshalObjectArray(mode, istream)) ; 
}
