/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef ActiveMQ_Message_hpp_
#define ActiveMQ_Message_hpp_

// Turn off warning message for ignored exception specification
#ifdef _MSC_VER
#pragma warning( disable : 4290 )
#endif

#include <string>
#include "activemq/command/BaseCommand.hpp"
#include "activemq/command/ProducerId.hpp"
#include "activemq/command/ActiveMQDestination.hpp"
#include "activemq/command/TransactionId.hpp"
#include "activemq/command/ActiveMQDestination.hpp"
#include "activemq/command/MessageId.hpp"
#include "activemq/command/TransactionId.hpp"
#include "activemq/command/ActiveMQDestination.hpp"
#include "activemq/IDataStructure.hpp"
#include "activemq/command/ConsumerId.hpp"
#include "activemq/command/BrokerId.hpp"

#include "activemq/protocol/IMarshaller.hpp"
#include "ppr/io/IOutputStream.hpp"
#include "ppr/io/IInputStream.hpp"
#include "ppr/io/IOException.hpp"
#include "ppr/util/ifr/array"
#include "ppr/util/ifr/p"

namespace apache
{
  namespace activemq
  {
    namespace command
    {
      using namespace ifr;
      using namespace std;
      using namespace apache::activemq;
      using namespace apache::activemq::protocol;
      using namespace apache::ppr::io;

/*
 *
 *  Command and marshalling code for OpenWire format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
class Message : public BaseCommand
{
protected:
    p<ProducerId> producerId ;
    p<ActiveMQDestination> destination ;
    p<TransactionId> transactionId ;
    p<ActiveMQDestination> originalDestination ;
    p<MessageId> messageId ;
    p<TransactionId> originalTransactionId ;
    p<string> groupID ;
    int groupSequence ;
    p<string> correlationId ;
    bool persistent ;
    long long expiration ;
    char priority ;
    p<ActiveMQDestination> replyTo ;
    long long timestamp ;
    p<string> type ;
    array<char> content ;
    array<char> marshalledProperties ;
    p<IDataStructure> dataStructure ;
    p<ConsumerId> targetConsumerId ;
    bool compressed ;
    int redeliveryCounter ;
    array<BrokerId> brokerPath ;
    long long arrival ;
    p<string> userID ;
    bool recievedByDFBridge ;

public:
    const static unsigned char TYPE = 0;

public:
    Message() ;
    virtual ~Message() ;

    virtual unsigned char getDataStructureType() ;

    virtual p<ProducerId> getProducerId() ;
    virtual void setProducerId(p<ProducerId> producerId) ;

    virtual p<ActiveMQDestination> getDestination() ;
    virtual void setDestination(p<ActiveMQDestination> destination) ;

    virtual p<TransactionId> getTransactionId() ;
    virtual void setTransactionId(p<TransactionId> transactionId) ;

    virtual p<ActiveMQDestination> getOriginalDestination() ;
    virtual void setOriginalDestination(p<ActiveMQDestination> originalDestination) ;

    virtual p<MessageId> getMessageId() ;
    virtual void setMessageId(p<MessageId> messageId) ;

    virtual p<TransactionId> getOriginalTransactionId() ;
    virtual void setOriginalTransactionId(p<TransactionId> originalTransactionId) ;

    virtual p<string> getGroupID() ;
    virtual void setGroupID(p<string> groupID) ;

    virtual int getGroupSequence() ;
    virtual void setGroupSequence(int groupSequence) ;

    virtual p<string> getCorrelationId() ;
    virtual void setCorrelationId(p<string> correlationId) ;

    virtual bool getPersistent() ;
    virtual void setPersistent(bool persistent) ;

    virtual long long getExpiration() ;
    virtual void setExpiration(long long expiration) ;

    virtual char getPriority() ;
    virtual void setPriority(char priority) ;

    virtual p<ActiveMQDestination> getReplyTo() ;
    virtual void setReplyTo(p<ActiveMQDestination> replyTo) ;

    virtual long long getTimestamp() ;
    virtual void setTimestamp(long long timestamp) ;

    virtual p<string> getType() ;
    virtual void setType(p<string> type) ;

    virtual array<char> getContent() ;
    virtual void setContent(array<char> content) ;

    virtual array<char> getMarshalledProperties() ;
    virtual void setMarshalledProperties(array<char> marshalledProperties) ;

    virtual p<IDataStructure> getDataStructure() ;
    virtual void setDataStructure(p<IDataStructure> dataStructure) ;

    virtual p<ConsumerId> getTargetConsumerId() ;
    virtual void setTargetConsumerId(p<ConsumerId> targetConsumerId) ;

    virtual bool getCompressed() ;
    virtual void setCompressed(bool compressed) ;

    virtual int getRedeliveryCounter() ;
    virtual void setRedeliveryCounter(int redeliveryCounter) ;

    virtual array<BrokerId> getBrokerPath() ;
    virtual void setBrokerPath(array<BrokerId> brokerPath) ;

    virtual long long getArrival() ;
    virtual void setArrival(long long arrival) ;

    virtual p<string> getUserID() ;
    virtual void setUserID(p<string> userID) ;

    virtual bool getRecievedByDFBridge() ;
    virtual void setRecievedByDFBridge(bool recievedByDFBridge) ;

    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;
    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;
} ;

/* namespace */
    }
  }
}

#endif /*ActiveMQ_Message_hpp_*/
