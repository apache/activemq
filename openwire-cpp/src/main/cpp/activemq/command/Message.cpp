/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "activemq/command/Message.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Command and marshalling code for OpenWire format for Message
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
Message::Message()
{
    this->producerId = NULL ;
    this->destination = NULL ;
    this->transactionId = NULL ;
    this->originalDestination = NULL ;
    this->messageId = NULL ;
    this->originalTransactionId = NULL ;
    this->groupID = NULL ;
    this->groupSequence = 0 ;
    this->correlationId = NULL ;
    this->persistent = false ;
    this->expiration = 0 ;
    this->priority = 0 ;
    this->replyTo = NULL ;
    this->timestamp = 0 ;
    this->type = NULL ;
    this->content = NULL ;
    this->marshalledProperties = NULL ;
    this->dataStructure = NULL ;
    this->targetConsumerId = NULL ;
    this->compressed = false ;
    this->redeliveryCounter = 0 ;
    this->brokerPath = NULL ;
    this->arrival = 0 ;
    this->userID = NULL ;
    this->recievedByDFBridge = false ;
}

Message::~Message()
{
}

unsigned char Message::getDataStructureType()
{
    return Message::TYPE ; 
}

        
p<ProducerId> Message::getProducerId()
{
    return producerId ;
}

void Message::setProducerId(p<ProducerId> producerId)
{
    this->producerId = producerId ;
}

        
p<ActiveMQDestination> Message::getDestination()
{
    return destination ;
}

void Message::setDestination(p<ActiveMQDestination> destination)
{
    this->destination = destination ;
}

        
p<TransactionId> Message::getTransactionId()
{
    return transactionId ;
}

void Message::setTransactionId(p<TransactionId> transactionId)
{
    this->transactionId = transactionId ;
}

        
p<ActiveMQDestination> Message::getOriginalDestination()
{
    return originalDestination ;
}

void Message::setOriginalDestination(p<ActiveMQDestination> originalDestination)
{
    this->originalDestination = originalDestination ;
}

        
p<MessageId> Message::getMessageId()
{
    return messageId ;
}

void Message::setMessageId(p<MessageId> messageId)
{
    this->messageId = messageId ;
}

        
p<TransactionId> Message::getOriginalTransactionId()
{
    return originalTransactionId ;
}

void Message::setOriginalTransactionId(p<TransactionId> originalTransactionId)
{
    this->originalTransactionId = originalTransactionId ;
}

        
p<string> Message::getGroupID()
{
    return groupID ;
}

void Message::setGroupID(p<string> groupID)
{
    this->groupID = groupID ;
}

        
int Message::getGroupSequence()
{
    return groupSequence ;
}

void Message::setGroupSequence(int groupSequence)
{
    this->groupSequence = groupSequence ;
}

        
p<string> Message::getCorrelationId()
{
    return correlationId ;
}

void Message::setCorrelationId(p<string> correlationId)
{
    this->correlationId = correlationId ;
}

        
bool Message::getPersistent()
{
    return persistent ;
}

void Message::setPersistent(bool persistent)
{
    this->persistent = persistent ;
}

        
long long Message::getExpiration()
{
    return expiration ;
}

void Message::setExpiration(long long expiration)
{
    this->expiration = expiration ;
}

        
char Message::getPriority()
{
    return priority ;
}

void Message::setPriority(char priority)
{
    this->priority = priority ;
}

        
p<ActiveMQDestination> Message::getReplyTo()
{
    return replyTo ;
}

void Message::setReplyTo(p<ActiveMQDestination> replyTo)
{
    this->replyTo = replyTo ;
}

        
long long Message::getTimestamp()
{
    return timestamp ;
}

void Message::setTimestamp(long long timestamp)
{
    this->timestamp = timestamp ;
}

        
p<string> Message::getType()
{
    return type ;
}

void Message::setType(p<string> type)
{
    this->type = type ;
}

        
array<char> Message::getContent()
{
    return content ;
}

void Message::setContent(array<char> content)
{
    this->content = content ;
}

        
array<char> Message::getMarshalledProperties()
{
    return marshalledProperties ;
}

void Message::setMarshalledProperties(array<char> marshalledProperties)
{
    this->marshalledProperties = marshalledProperties ;
}

        
p<IDataStructure> Message::getDataStructure()
{
    return dataStructure ;
}

void Message::setDataStructure(p<IDataStructure> dataStructure)
{
    this->dataStructure = dataStructure ;
}

        
p<ConsumerId> Message::getTargetConsumerId()
{
    return targetConsumerId ;
}

void Message::setTargetConsumerId(p<ConsumerId> targetConsumerId)
{
    this->targetConsumerId = targetConsumerId ;
}

        
bool Message::getCompressed()
{
    return compressed ;
}

void Message::setCompressed(bool compressed)
{
    this->compressed = compressed ;
}

        
int Message::getRedeliveryCounter()
{
    return redeliveryCounter ;
}

void Message::setRedeliveryCounter(int redeliveryCounter)
{
    this->redeliveryCounter = redeliveryCounter ;
}

        
array<BrokerId> Message::getBrokerPath()
{
    return brokerPath ;
}

void Message::setBrokerPath(array<BrokerId> brokerPath)
{
    this->brokerPath = brokerPath ;
}

        
long long Message::getArrival()
{
    return arrival ;
}

void Message::setArrival(long long arrival)
{
    this->arrival = arrival ;
}

        
p<string> Message::getUserID()
{
    return userID ;
}

void Message::setUserID(p<string> userID)
{
    this->userID = userID ;
}

        
bool Message::getRecievedByDFBridge()
{
    return recievedByDFBridge ;
}

void Message::setRecievedByDFBridge(bool recievedByDFBridge)
{
    this->recievedByDFBridge = recievedByDFBridge ;
}

int Message::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)
{
    int size = 0 ;

    size += BaseCommand::marshal(marshaller, mode, ostream) ; 
    size += marshaller->marshalObject(producerId, mode, ostream) ; 
    size += marshaller->marshalObject(destination, mode, ostream) ; 
    size += marshaller->marshalObject(transactionId, mode, ostream) ; 
    size += marshaller->marshalObject(originalDestination, mode, ostream) ; 
    size += marshaller->marshalObject(messageId, mode, ostream) ; 
    size += marshaller->marshalObject(originalTransactionId, mode, ostream) ; 
    size += marshaller->marshalString(groupID, mode, ostream) ; 
    size += marshaller->marshalInt(groupSequence, mode, ostream) ; 
    size += marshaller->marshalString(correlationId, mode, ostream) ; 
    size += marshaller->marshalBoolean(persistent, mode, ostream) ; 
    size += marshaller->marshalLong(expiration, mode, ostream) ; 
    size += marshaller->marshalByte(priority, mode, ostream) ; 
    size += marshaller->marshalObject(replyTo, mode, ostream) ; 
    size += marshaller->marshalLong(timestamp, mode, ostream) ; 
    size += marshaller->marshalString(type, mode, ostream) ; 
    size += marshaller->marshalByteArray(content, mode, ostream) ; 
    size += marshaller->marshalByteArray(marshalledProperties, mode, ostream) ; 
    size += marshaller->marshalObject(dataStructure, mode, ostream) ; 
    size += marshaller->marshalObject(targetConsumerId, mode, ostream) ; 
    size += marshaller->marshalBoolean(compressed, mode, ostream) ; 
    size += marshaller->marshalInt(redeliveryCounter, mode, ostream) ; 
    size += marshaller->marshalObjectArray(brokerPath, mode, ostream) ; 
    size += marshaller->marshalLong(arrival, mode, ostream) ; 
    size += marshaller->marshalString(userID, mode, ostream) ; 
    size += marshaller->marshalBoolean(recievedByDFBridge, mode, ostream) ; 
    return size ;
}

void Message::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)
{
    BaseCommand::unmarshal(marshaller, mode, istream) ; 
    producerId = p_cast<ProducerId>(marshaller->unmarshalObject(mode, istream)) ; 
    destination = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, istream)) ; 
    transactionId = p_cast<TransactionId>(marshaller->unmarshalObject(mode, istream)) ; 
    originalDestination = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, istream)) ; 
    messageId = p_cast<MessageId>(marshaller->unmarshalObject(mode, istream)) ; 
    originalTransactionId = p_cast<TransactionId>(marshaller->unmarshalObject(mode, istream)) ; 
    groupID = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    groupSequence = (marshaller->unmarshalInt(mode, istream)) ; 
    correlationId = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    persistent = (marshaller->unmarshalBoolean(mode, istream)) ; 
    expiration = (marshaller->unmarshalLong(mode, istream)) ; 
    priority = (marshaller->unmarshalByte(mode, istream)) ; 
    replyTo = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, istream)) ; 
    timestamp = (marshaller->unmarshalLong(mode, istream)) ; 
    type = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    content = (marshaller->unmarshalByteArray(mode, istream)) ; 
    marshalledProperties = (marshaller->unmarshalByteArray(mode, istream)) ; 
    dataStructure = p_cast<IDataStructure>(marshaller->unmarshalObject(mode, istream)) ; 
    targetConsumerId = p_cast<ConsumerId>(marshaller->unmarshalObject(mode, istream)) ; 
    compressed = (marshaller->unmarshalBoolean(mode, istream)) ; 
    redeliveryCounter = (marshaller->unmarshalInt(mode, istream)) ; 
    brokerPath = array_cast<BrokerId>(marshaller->unmarshalObjectArray(mode, istream)) ; 
    arrival = (marshaller->unmarshalLong(mode, istream)) ; 
    userID = p_cast<string>(marshaller->unmarshalString(mode, istream)) ; 
    recievedByDFBridge = (marshaller->unmarshalBoolean(mode, istream)) ; 
}
