/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "activemq/command/BrokerInfo.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Marshalling code for Open Wire Format for BrokerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
BrokerInfo::BrokerInfo()
{
    this->brokerId = NULL ;
    this->brokerURL = NULL ;
    this->peerBrokerInfos = NULL ;
    this->brokerName = NULL ;
    this->slaveBroker = false ;
}

BrokerInfo::~BrokerInfo()
{
}

unsigned char BrokerInfo::getDataStructureType()
{
    return BrokerInfo::TYPE ; 
}

        
p<BrokerId> BrokerInfo::getBrokerId()
{
    return brokerId ;
}

void BrokerInfo::setBrokerId(p<BrokerId> brokerId)
{
    this->brokerId = brokerId ;
}

        
p<string> BrokerInfo::getBrokerURL()
{
    return brokerURL ;
}

void BrokerInfo::setBrokerURL(p<string> brokerURL)
{
    this->brokerURL = brokerURL ;
}

        
array<BrokerInfo> BrokerInfo::getPeerBrokerInfos()
{
    return peerBrokerInfos ;
}

void BrokerInfo::setPeerBrokerInfos(array<BrokerInfo> peerBrokerInfos)
{
    this->peerBrokerInfos = peerBrokerInfos ;
}

        
p<string> BrokerInfo::getBrokerName()
{
    return brokerName ;
}

void BrokerInfo::setBrokerName(p<string> brokerName)
{
    this->brokerName = brokerName ;
}

        
bool BrokerInfo::getSlaveBroker()
{
    return slaveBroker ;
}

void BrokerInfo::setSlaveBroker(bool slaveBroker)
{
    this->slaveBroker = slaveBroker ;
}

int BrokerInfo::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> writer) throw (IOException)
{
    int size = 0 ;

    size += marshaller->marshalInt(commandId, mode, writer) ;
    size += marshaller->marshalBoolean(responseRequired, mode, writer) ; 
    size += marshaller->marshalObject(brokerId, mode, writer) ; 
    size += marshaller->marshalString(brokerURL, mode, writer) ; 
    size += marshaller->marshalObjectArray(peerBrokerInfos, mode, writer) ; 
    size += marshaller->marshalString(brokerName, mode, writer) ; 
    size += marshaller->marshalBoolean(slaveBroker, mode, writer) ; 
    return size ;
}

void BrokerInfo::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> reader) throw (IOException)
{
    commandId = marshaller->unmarshalInt(mode, reader) ;
    responseRequired = marshaller->unmarshalBoolean(mode, reader) ; 
    brokerId = p_cast<BrokerId>(marshaller->unmarshalObject(mode, reader)) ; 
    brokerURL = p_cast<string>(marshaller->unmarshalString(mode, reader)) ; 
    peerBrokerInfos = array_cast<BrokerInfo>(marshaller->unmarshalObjectArray(mode, reader)) ; 
    brokerName = p_cast<string>(marshaller->unmarshalString(mode, reader)) ; 
    slaveBroker = (marshaller->unmarshalBoolean(mode, reader)) ; 
}
