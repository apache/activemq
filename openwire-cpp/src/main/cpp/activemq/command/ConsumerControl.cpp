/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "activemq/command/ConsumerControl.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Command and marshalling code for OpenWire format for ConsumerControl
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
ConsumerControl::ConsumerControl()
{
    this->close = false ;
    this->consumerId = NULL ;
    this->prefetch = 0 ;
}

ConsumerControl::~ConsumerControl()
{
}

unsigned char ConsumerControl::getDataStructureType()
{
    return ConsumerControl::TYPE ; 
}

        
bool ConsumerControl::getClose()
{
    return close ;
}

void ConsumerControl::setClose(bool close)
{
    this->close = close ;
}

        
p<ConsumerId> ConsumerControl::getConsumerId()
{
    return consumerId ;
}

void ConsumerControl::setConsumerId(p<ConsumerId> consumerId)
{
    this->consumerId = consumerId ;
}

        
int ConsumerControl::getPrefetch()
{
    return prefetch ;
}

void ConsumerControl::setPrefetch(int prefetch)
{
    this->prefetch = prefetch ;
}

int ConsumerControl::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)
{
    int size = 0 ;

    size += BaseCommand::marshal(marshaller, mode, ostream) ; 
    size += marshaller->marshalBoolean(close, mode, ostream) ; 
    size += marshaller->marshalObject(consumerId, mode, ostream) ; 
    size += marshaller->marshalInt(prefetch, mode, ostream) ; 
    return size ;
}

void ConsumerControl::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)
{
    BaseCommand::unmarshal(marshaller, mode, istream) ; 
    close = (marshaller->unmarshalBoolean(mode, istream)) ; 
    consumerId = p_cast<ConsumerId>(marshaller->unmarshalObject(mode, istream)) ; 
    prefetch = (marshaller->unmarshalInt(mode, istream)) ; 
}
