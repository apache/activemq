/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef ActiveMQ_MessageAck_hpp_
#define ActiveMQ_MessageAck_hpp_

// Turn off warning message for ignored exception specification
#ifdef _MSC_VER
#pragma warning( disable : 4290 )
#endif

#include <string>
#include "activemq/command/BaseCommand.hpp"
#include "activemq/command/ActiveMQDestination.hpp"
#include "activemq/command/TransactionId.hpp"
#include "activemq/command/ConsumerId.hpp"
#include "activemq/command/MessageId.hpp"
#include "activemq/command/MessageId.hpp"

#include "activemq/protocol/IMarshaller.hpp"
#include "ppr/io/IOutputStream.hpp"
#include "ppr/io/IInputStream.hpp"
#include "ppr/io/IOException.hpp"
#include "ppr/util/ifr/array"
#include "ppr/util/ifr/p"

namespace apache
{
  namespace activemq
  {
    namespace command
    {
      using namespace ifr;
      using namespace std;
      using namespace apache::activemq;
      using namespace apache::activemq::protocol;
      using namespace apache::ppr::io;

/*
 *
 *  Command and marshalling code for OpenWire format for MessageAck
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
class MessageAck : public BaseCommand
{
protected:
    p<ActiveMQDestination> destination ;
    p<TransactionId> transactionId ;
    p<ConsumerId> consumerId ;
    char ackType ;
    p<MessageId> firstMessageId ;
    p<MessageId> lastMessageId ;
    int messageCount ;

public:
    const static unsigned char TYPE = 22;

public:
    MessageAck() ;
    virtual ~MessageAck() ;

    virtual unsigned char getDataStructureType() ;

    virtual p<ActiveMQDestination> getDestination() ;
    virtual void setDestination(p<ActiveMQDestination> destination) ;

    virtual p<TransactionId> getTransactionId() ;
    virtual void setTransactionId(p<TransactionId> transactionId) ;

    virtual p<ConsumerId> getConsumerId() ;
    virtual void setConsumerId(p<ConsumerId> consumerId) ;

    virtual char getAckType() ;
    virtual void setAckType(char ackType) ;

    virtual p<MessageId> getFirstMessageId() ;
    virtual void setFirstMessageId(p<MessageId> firstMessageId) ;

    virtual p<MessageId> getLastMessageId() ;
    virtual void setLastMessageId(p<MessageId> lastMessageId) ;

    virtual int getMessageCount() ;
    virtual void setMessageCount(int messageCount) ;

    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;
    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;
} ;

/* namespace */
    }
  }
}

#endif /*ActiveMQ_MessageAck_hpp_*/
