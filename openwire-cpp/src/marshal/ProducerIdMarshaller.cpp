/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "marshal/ProducerIdMarshaller.hpp"

using namespace apache::activemq::client::marshal;

/*
 *  Marshalling code for Open Wire Format for ProducerId
 *
 * NOTE!: This file is autogenerated - do not modify!
 *        if you need to make a change, please see the Groovy scripts in the
 *        activemq-core module
 */

ProducerIdMarshaller::ProducerIdMarshaller()
{
    // no-op
}

ProducerIdMarshaller::~ProducerIdMarshaller()
{
    // no-op
}



IDataStructure* ProducerIdMarshaller::createObject() 
{
    return new ProducerId();
}

char ProducerIdMarshaller::getDataStructureType() 
{
    return ProducerId.ID_ProducerId;
}

    /* 
     * Un-marshal an object instance from the data input stream
     */ 
void ProducerIdMarshaller::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) 
{
    base.unmarshal(wireFormat, o, dataIn, bs);

    ProducerId& info = (ProducerId&) o;
        info.setConnectionId(tightUnmarshalString(dataIn, bs));
        info.setValue(tightUnmarshalLong(wireFormat, dataIn, bs));
        info.setSessionId(tightUnmarshalLong(wireFormat, dataIn, bs));

}


/*
 * Write the booleans that this object uses to a BooleanStream
 */
int ProducerIdMarshaller::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {
    ProducerId& info = (ProducerId&) o;

    int rc = base.marshal1(wireFormat, info, bs);
    rc += writeString(info.getConnectionId(), bs);
    rc += marshal1Long(wireFormat, info.getValue(), bs);
    rc += marshal1Long(wireFormat, info.getSessionId(), bs);

    return rc + 0;
}

/* 
 * Write a object instance to data output stream
 */
void ProducerIdMarshaller::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {
    base.marshal2(wireFormat, o, dataOut, bs);

    ProducerId& info = (ProducerId&) o;
    writeString(info.getConnectionId(), dataOut, bs);
    marshal2Long(wireFormat, info.getValue(), dataOut, bs);
    marshal2Long(wireFormat, info.getSessionId(), dataOut, bs);

}
