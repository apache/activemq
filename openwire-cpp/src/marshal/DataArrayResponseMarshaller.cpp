/*
 * Copyright 2006 The Apache Software Foundation or its licensors, as
 * applicable.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "marshal/DataArrayResponseMarshaller.hpp"

using namespace apache::activemq::client::marshal;

/*
 *  Marshalling code for Open Wire Format for DataArrayResponse
 *
 * NOTE!: This file is autogenerated - do not modify!
 *        if you need to make a change, please see the Groovy scripts in the
 *        activemq-core module
 */

DataArrayResponseMarshaller::DataArrayResponseMarshaller()
{
    // no-op
}

DataArrayResponseMarshaller::~DataArrayResponseMarshaller()
{
    // no-op
}



DataStructure* DataArrayResponseMarshaller::createObject() 
{
    return new DataArrayResponse();
}

byte DataArrayResponseMarshaller::getDataStructureType() 
{
    return DataArrayResponse.ID_DataArrayResponse;
}

    /* 
     * Un-marshal an object instance from the data input stream
     */ 
void DataArrayResponseMarshaller::unmarshal(OpenWireFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) 
{
    base.unmarshal(wireFormat, o, dataIn, bs);

    DataArrayResponse& info = (DataArrayResponse&) o;

        if (bs.readBoolean()) {
            short size = dataIn.readShort();
            DataStructure value[] = new DataStructure[size];
            for( int i=0; i < size; i++ ) {
                value[i] = (DataStructure) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
            }
            info.setData(value);
        }
        else {
            info.setData(null);
        }

}


/*
 * Write the booleans that this object uses to a BooleanStream
 */
int DataArrayResponseMarshaller::marshal1(OpenWireFormat& wireFormat, Object& o, BooleanStream& bs) {
    DataArrayResponse& info = (DataArrayResponse&) o;

    int rc = base.marshal1(wireFormat, info, bs);
    rc += marshalObjectArray(wireFormat, info.getData(), bs);

    return rc + 0;
}

/* 
 * Write a object instance to data output stream
 */
void DataArrayResponseMarshaller::marshal2(OpenWireFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {
    base.marshal2(wireFormat, o, dataOut, bs);

    DataArrayResponse& info = (DataArrayResponse&) o;
    marshalObjectArray(wireFormat, info.getData(), dataOut, bs);

}
