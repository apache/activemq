/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "marshal/ConsumerInfoMarshaller.hpp"

using namespace apache::activemq::client::marshal;

/*
 *  Marshalling code for Open Wire Format for ConsumerInfo
 *
 * NOTE!: This file is autogenerated - do not modify!
 *        if you need to make a change, please see the Groovy scripts in the
 *        activemq-core module
 */

ConsumerInfoMarshaller::ConsumerInfoMarshaller()
{
    // no-op
}

ConsumerInfoMarshaller::~ConsumerInfoMarshaller()
{
    // no-op
}



IDataStructure* ConsumerInfoMarshaller::createObject() 
{
    return new ConsumerInfo();
}

char ConsumerInfoMarshaller::getDataStructureType() 
{
    return ConsumerInfo.ID_ConsumerInfo;
}

    /* 
     * Un-marshal an object instance from the data input stream
     */ 
void ConsumerInfoMarshaller::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) 
{
    base.unmarshal(wireFormat, o, dataIn, bs);

    ConsumerInfo& info = (ConsumerInfo&) o;
        info.setConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
        info.setBrowser(bs.readBoolean());
        info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
        info.setPrefetchSize(dataIn.readInt());
        info.setMaximumPendingMessageLimit(dataIn.readInt());
        info.setDispatchAsync(bs.readBoolean());
        info.setSelector(tightUnmarshalString(dataIn, bs));
        info.setSubcriptionName(tightUnmarshalString(dataIn, bs));
        info.setNoLocal(bs.readBoolean());
        info.setExclusive(bs.readBoolean());
        info.setRetroactive(bs.readBoolean());
        info.setPriority(dataIn.readByte());

        if (bs.readBoolean()) {
            short size = dataIn.readShort();
            org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
            for( int i=0; i < size; i++ ) {
                value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
            }
            info.setBrokerPath(value);
        }
        else {
            info.setBrokerPath(null);
        }
        info.setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
        info.setNetworkSubscription(bs.readBoolean());
        info.setOptimizedAcknowledge(bs.readBoolean());
        info.setNoRangeAcks(bs.readBoolean());

}


/*
 * Write the booleans that this object uses to a BooleanStream
 */
int ConsumerInfoMarshaller::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {
    ConsumerInfo& info = (ConsumerInfo&) o;

    int rc = base.marshal1(wireFormat, info, bs);
    rc += marshal1CachedObject(wireFormat, info.getConsumerId(), bs);
    bs.writeBoolean(info.isBrowser());
    rc += marshal1CachedObject(wireFormat, info.getDestination(), bs);
            bs.writeBoolean(info.isDispatchAsync());
    rc += writeString(info.getSelector(), bs);
    rc += writeString(info.getSubcriptionName(), bs);
    bs.writeBoolean(info.isNoLocal());
    bs.writeBoolean(info.isExclusive());
    bs.writeBoolean(info.isRetroactive());
        rc += marshalObjectArray(wireFormat, info.getBrokerPath(), bs);
    rc += marshal1NestedObject(wireFormat, info.getAdditionalPredicate(), bs);
    bs.writeBoolean(info.isNetworkSubscription());
    bs.writeBoolean(info.isOptimizedAcknowledge());
    bs.writeBoolean(info.isNoRangeAcks());

    return rc + 3;
}

/* 
 * Write a object instance to data output stream
 */
void ConsumerInfoMarshaller::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {
    base.marshal2(wireFormat, o, dataOut, bs);

    ConsumerInfo& info = (ConsumerInfo&) o;
    marshal2CachedObject(wireFormat, info.getConsumerId(), dataOut, bs);
    bs.readBoolean();
    marshal2CachedObject(wireFormat, info.getDestination(), dataOut, bs);
    DataStreamMarshaller.writeInt(info.getPrefetchSize(), dataOut);
    DataStreamMarshaller.writeInt(info.getMaximumPendingMessageLimit(), dataOut);
    bs.readBoolean();
    writeString(info.getSelector(), dataOut, bs);
    writeString(info.getSubcriptionName(), dataOut, bs);
    bs.readBoolean();
    bs.readBoolean();
    bs.readBoolean();
    DataStreamMarshaller.writeByte(info.getPriority(), dataOut);
    marshalObjectArray(wireFormat, info.getBrokerPath(), dataOut, bs);
    marshal2NestedObject(wireFormat, info.getAdditionalPredicate(), dataOut, bs);
    bs.readBoolean();
    bs.readBoolean();
    bs.readBoolean();

}
