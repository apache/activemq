/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

// Marshalling code for Open Wire Format
//
//
// NOTE!: This file is autogenerated - do not modify!
//        if you need to make a change, please see the Groovy scripts in the
//        activemq-openwire module
//

#include <memory>

#include "marshal/MarshallerFactory.h"

using std::auto_ptr;

#include "marshal/LocalTransactionIdMarshaller.h"
#include "marshal/PartialCommandMarshaller.h"
#include "marshal/IntegerResponseMarshaller.h"
#include "marshal/ActiveMQQueueMarshaller.h"
#include "marshal/ActiveMQObjectMessageMarshaller.h"
#include "marshal/ConnectionIdMarshaller.h"
#include "marshal/ConnectionInfoMarshaller.h"
#include "marshal/ProducerInfoMarshaller.h"
#include "marshal/MessageDispatchNotificationMarshaller.h"
#include "marshal/SessionInfoMarshaller.h"
#include "marshal/TransactionInfoMarshaller.h"
#include "marshal/ActiveMQStreamMessageMarshaller.h"
#include "marshal/MessageAckMarshaller.h"
#include "marshal/ProducerIdMarshaller.h"
#include "marshal/MessageIdMarshaller.h"
#include "marshal/ActiveMQTempQueueMarshaller.h"
#include "marshal/RemoveSubscriptionInfoMarshaller.h"
#include "marshal/SessionIdMarshaller.h"
#include "marshal/DataArrayResponseMarshaller.h"
#include "marshal/JournalQueueAckMarshaller.h"
#include "marshal/ResponseMarshaller.h"
#include "marshal/ConnectionErrorMarshaller.h"
#include "marshal/ConsumerInfoMarshaller.h"
#include "marshal/XATransactionIdMarshaller.h"
#include "marshal/JournalTraceMarshaller.h"
#include "marshal/ConsumerIdMarshaller.h"
#include "marshal/ActiveMQTextMessageMarshaller.h"
#include "marshal/SubscriptionInfoMarshaller.h"
#include "marshal/JournalTransactionMarshaller.h"
#include "marshal/ControlCommandMarshaller.h"
#include "marshal/LastPartialCommandMarshaller.h"
#include "marshal/NetworkBridgeFilterMarshaller.h"
#include "marshal/ActiveMQBytesMessageMarshaller.h"
#include "marshal/WireFormatInfoMarshaller.h"
#include "marshal/ActiveMQTempTopicMarshaller.h"
#include "marshal/DiscoveryEventMarshaller.h"
#include "marshal/ReplayCommandMarshaller.h"
#include "marshal/ActiveMQTopicMarshaller.h"
#include "marshal/BrokerInfoMarshaller.h"
#include "marshal/DestinationInfoMarshaller.h"
#include "marshal/ShutdownInfoMarshaller.h"
#include "marshal/DataResponseMarshaller.h"
#include "marshal/ConnectionControlMarshaller.h"
#include "marshal/KeepAliveInfoMarshaller.h"
#include "marshal/FlushCommandMarshaller.h"
#include "marshal/ConsumerControlMarshaller.h"
#include "marshal/JournalTopicAckMarshaller.h"
#include "marshal/BrokerIdMarshaller.h"
#include "marshal/MessageDispatchMarshaller.h"
#include "marshal/ActiveMQMapMessageMarshaller.h"
#include "marshal/ActiveMQMessageMarshaller.h"
#include "marshal/RemoveInfoMarshaller.h"
#include "marshal/ExceptionResponseMarshaller.h"

using namespace ActiveMQ::Marshalling;

void
MarshallerFactory::configure(ProtocolFormat& format) 
{

    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new LocalTransactionIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new PartialCommandMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new IntegerResponseMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQQueueMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQObjectMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConnectionIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConnectionInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ProducerInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new MessageDispatchNotificationMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new SessionInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new TransactionInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQStreamMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new MessageAckMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ProducerIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new MessageIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQTempQueueMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new RemoveSubscriptionInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new SessionIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new DataArrayResponseMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new JournalQueueAckMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ResponseMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConnectionErrorMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConsumerInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new XATransactionIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new JournalTraceMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConsumerIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQTextMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new SubscriptionInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new JournalTransactionMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ControlCommandMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new LastPartialCommandMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new NetworkBridgeFilterMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQBytesMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new WireFormatInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQTempTopicMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new DiscoveryEventMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ReplayCommandMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQTopicMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new BrokerInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new DestinationInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ShutdownInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new DataResponseMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConnectionControlMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new KeepAliveInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new FlushCommandMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ConsumerControlMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new JournalTopicAckMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new BrokerIdMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new MessageDispatchMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQMapMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ActiveMQMessageMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new RemoveInfoMarshaller()));
    format.addMarshaller(auto_ptr<BaseDataStreamMarshaller>(new ExceptionResponseMarshaller()));
}
