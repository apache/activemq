/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#ifndef MessageDispatchNotification_h_
#define MessageDispatchNotification_h_

#include <string>
#include <vector>
#include <exception>
#include <inttypes.h>
#include <boost/shared_ptr.hpp>

#include "command/BaseCommand.h"    
#include "ConsumerId.h"
#include "ActiveMQDestination.h"
#include "MessageId.h"

namespace ActiveMQ {
  namespace Command {

    /*
     *
     *  Marshalling code for Open Wire Format for MessageDispatchNotification
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Groovy scripts in the
     *         activemq-core module
     *
     */
    class MessageDispatchNotification : public BaseCommand
    {
      private:
        boost::shared_ptr<const ConsumerId> consumerId_;
        boost::shared_ptr<const ActiveMQDestination> destination_;
        int64_t deliverySequenceId_;
        boost::shared_ptr<const MessageId> messageId_;

      public:
        const static int TYPE = 90;
    
      public:
        MessageDispatchNotification();
        virtual ~MessageDispatchNotification();
    
        virtual bool isMarshalAware() const;
        virtual int getCommandType() const;

        virtual boost::shared_ptr<const ConsumerId> getConsumerId() const;
        virtual void setConsumerId(const boost::shared_ptr<ConsumerId>& consumerId);

        virtual boost::shared_ptr<const ActiveMQDestination> getDestination() const;
        virtual void setDestination(const boost::shared_ptr<ActiveMQDestination>& destination);

        virtual int64_t getDeliverySequenceId() const;
        virtual void setDeliverySequenceId(int64_t deliverySequenceId);

        virtual boost::shared_ptr<const MessageId> getMessageId() const;
        virtual void setMessageId(const boost::shared_ptr<MessageId>& messageId);
    };
  }
}

#endif /*MessageDispatchNotification_h_*/
