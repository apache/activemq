/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#ifndef SubscriptionInfo_h_
#define SubscriptionInfo_h_

#include <string>
#include <vector>
#include <exception>
#include <inttypes.h>
#include <boost/shared_ptr.hpp>

#include "command/AbstractCommand.h"    
#include "ActiveMQDestination.h"

namespace ActiveMQ {
  namespace Command {

    /*
     *
     *  Marshalling code for Open Wire Format for SubscriptionInfo
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Groovy scripts in the
     *         activemq-core module
     *
     */
    class SubscriptionInfo : public AbstractCommand
    {
      private:
        std::string clientId_;
        boost::shared_ptr<const ActiveMQDestination> destination_;
        std::string selector_;
        std::string subcriptionName_;

      public:
        const static int TYPE = 55;
    
      public:
        SubscriptionInfo();
        virtual ~SubscriptionInfo();
    
        virtual bool isMarshalAware() const;
        virtual int getCommandType() const;

        virtual const std::string& getClientId() const;
        virtual void setClientId(const std::string& clientId);

        virtual boost::shared_ptr<const ActiveMQDestination> getDestination() const;
        virtual void setDestination(const boost::shared_ptr<ActiveMQDestination>& destination);

        virtual const std::string& getSelector() const;
        virtual void setSelector(const std::string& selector);

        virtual const std::string& getSubcriptionName() const;
        virtual void setSubcriptionName(const std::string& subcriptionName);
    };
  }
}

#endif /*SubscriptionInfo_h_*/
