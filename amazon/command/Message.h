/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#ifndef Message_h_
#define Message_h_

#include <string>
#include <vector>
#include <exception>
#include <inttypes.h>
#include <boost/shared_ptr.hpp>

#include "command/BaseCommand.h"    
#include "ProducerId.h"
#include "ActiveMQDestination.h"
#include "TransactionId.h"
#include "ActiveMQDestination.h"
#include "MessageId.h"
#include "TransactionId.h"
#include "ActiveMQDestination.h"
#include "IDataStructure.h"
#include "ConsumerId.h"
#include "BrokerId.h"

namespace ActiveMQ {
  namespace Command {

    /*
     *
     *  Marshalling code for Open Wire Format for Message
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Groovy scripts in the
     *         activemq-core module
     *
     */
    class Message : public BaseCommand
    {
      private:
        boost::shared_ptr<const ProducerId> producerId_;
        boost::shared_ptr<const ActiveMQDestination> destination_;
        boost::shared_ptr<const TransactionId> transactionId_;
        boost::shared_ptr<const ActiveMQDestination> originalDestination_;
        boost::shared_ptr<const MessageId> messageId_;
        boost::shared_ptr<const TransactionId> originalTransactionId_;
        std::string groupID_;
        int groupSequence_;
        std::string correlationId_;
        bool persistent_;
        int64_t expiration_;
        uint8_t priority_;
        boost::shared_ptr<const ActiveMQDestination> replyTo_;
        int64_t timestamp_;
        std::string type_;
        std::vector<uint8_t> content_;
        std::vector<uint8_t> marshalledProperties_;
        boost::shared_ptr<const IDataStructure> dataStructure_;
        boost::shared_ptr<const ConsumerId> targetConsumerId_;
        bool compressed_;
        int redeliveryCounter_;
        std::vector<boost::shared_ptr<const BrokerId> > brokerPath_;
        int64_t arrival_;
        std::string userID_;
        bool recievedByDFBridge_;

      public:
        const static int TYPE = 0;
    
      public:
        Message();
        virtual ~Message();
    
        virtual bool isMarshalAware() const;
        virtual int getCommandType() const;

        virtual boost::shared_ptr<const ProducerId> getProducerId() const;
        virtual void setProducerId(const boost::shared_ptr<ProducerId>& producerId);

        virtual boost::shared_ptr<const ActiveMQDestination> getDestination() const;
        virtual void setDestination(const boost::shared_ptr<ActiveMQDestination>& destination);

        virtual boost::shared_ptr<const TransactionId> getTransactionId() const;
        virtual void setTransactionId(const boost::shared_ptr<TransactionId>& transactionId);

        virtual boost::shared_ptr<const ActiveMQDestination> getOriginalDestination() const;
        virtual void setOriginalDestination(const boost::shared_ptr<ActiveMQDestination>& originalDestination);

        virtual boost::shared_ptr<const MessageId> getMessageId() const;
        virtual void setMessageId(const boost::shared_ptr<MessageId>& messageId);

        virtual boost::shared_ptr<const TransactionId> getOriginalTransactionId() const;
        virtual void setOriginalTransactionId(const boost::shared_ptr<TransactionId>& originalTransactionId);

        virtual const std::string& getGroupID() const;
        virtual void setGroupID(const std::string& groupID);

        virtual int getGroupSequence() const;
        virtual void setGroupSequence(int groupSequence);

        virtual const std::string& getCorrelationId() const;
        virtual void setCorrelationId(const std::string& correlationId);

        virtual bool isPersistent() const;
        virtual void setPersistent(bool persistent);

        virtual int64_t getExpiration() const;
        virtual void setExpiration(int64_t expiration);

        virtual uint8_t getPriority() const;
        virtual void setPriority(uint8_t priority);

        virtual boost::shared_ptr<const ActiveMQDestination> getReplyTo() const;
        virtual void setReplyTo(const boost::shared_ptr<ActiveMQDestination>& replyTo);

        virtual int64_t getTimestamp() const;
        virtual void setTimestamp(int64_t timestamp);

        virtual const std::string& getType() const;
        virtual void setType(const std::string& type);

        virtual const std::vector<unsigned char>& getContent() const;
        virtual void setContent(const std::vector<uint8_t>& content);

        virtual const std::vector<unsigned char>& getMarshalledProperties() const;
        virtual void setMarshalledProperties(const std::vector<uint8_t>& marshalledProperties);

        virtual const boost::shared_ptr<const IDataStructure>& getDataStructure() const;
        virtual void setDataStructure(const boost::shared_ptr<IDataStructure>& dataStructure);

        virtual boost::shared_ptr<const ConsumerId> getTargetConsumerId() const;
        virtual void setTargetConsumerId(const boost::shared_ptr<ConsumerId>& targetConsumerId);

        virtual bool isCompressed() const;
        virtual void setCompressed(bool compressed);

        virtual int getRedeliveryCounter() const;
        virtual void setRedeliveryCounter(int redeliveryCounter);

        virtual const std::vector<boost::shared_ptr<const BrokerId> >& getBrokerPath() const;
        virtual void setBrokerPath(const std::vector<boost::shared_ptr<const BrokerId> >& brokerPath);

        virtual int64_t getArrival() const;
        virtual void setArrival(int64_t arrival);

        virtual const std::string& getUserID() const;
        virtual void setUserID(const std::string& userID);

        virtual bool isRecievedByDFBridge() const;
        virtual void setRecievedByDFBridge(bool recievedByDFBridge);
    };
  }
}

#endif /*Message_h_*/
