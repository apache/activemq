/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#include "command/ConnectionControl.h"

using namespace ActiveMQ::Command;

/*
 *
 *  Marshalling code for Open Wire Format for ConnectionControl
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
bool
ConnectionControl::isMarshalAware() const
{
    return false;
}

ConnectionControl::ConnectionControl()
{
    close_ = 0;
    exit_ = 0;
    faultTolerant_ = 0;
    resume_ = 0;
    suspend_ = 0;
}

int
ConnectionControl::getCommandType() const
{
    return TYPE;
}

ConnectionControl::~ConnectionControl()
{
}

bool ConnectionControl::isClose() const
{
    return close_;
}

void ConnectionControl::setClose(bool close)
{
    close_ = close;
}

bool ConnectionControl::isExit() const
{
    return exit_;
}

void ConnectionControl::setExit(bool exit)
{
    exit_ = exit;
}

bool ConnectionControl::isFaultTolerant() const
{
    return faultTolerant_;
}

void ConnectionControl::setFaultTolerant(bool faultTolerant)
{
    faultTolerant_ = faultTolerant;
}

bool ConnectionControl::isResume() const
{
    return resume_;
}

void ConnectionControl::setResume(bool resume)
{
    resume_ = resume;
}

bool ConnectionControl::isSuspend() const
{
    return suspend_;
}

void ConnectionControl::setSuspend(bool suspend)
{
    suspend_ = suspend;
}
