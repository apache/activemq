/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#ifndef DestinationInfo_h_
#define DestinationInfo_h_

#include <string>
#include <vector>
#include <exception>
#include <inttypes.h>
#include <boost/shared_ptr.hpp>

#include "command/BaseCommand.h"    
#include "ConnectionId.h"
#include "ActiveMQDestination.h"
#include "BrokerId.h"

namespace ActiveMQ {
  namespace Command {

    /*
     *
     *  Marshalling code for Open Wire Format for DestinationInfo
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Groovy scripts in the
     *         activemq-core module
     *
     */
    class DestinationInfo : public BaseCommand
    {
      private:
        boost::shared_ptr<const ConnectionId> connectionId_;
        boost::shared_ptr<const ActiveMQDestination> destination_;
        uint8_t operationType_;
        int64_t timeout_;
        std::vector<boost::shared_ptr<const BrokerId> > brokerPath_;

      public:
        const static int TYPE = 8;
    
      public:
        DestinationInfo();
        virtual ~DestinationInfo();
    
        virtual bool isMarshalAware() const;
        virtual int getCommandType() const;

        virtual boost::shared_ptr<const ConnectionId> getConnectionId() const;
        virtual void setConnectionId(const boost::shared_ptr<ConnectionId>& connectionId);

        virtual boost::shared_ptr<const ActiveMQDestination> getDestination() const;
        virtual void setDestination(const boost::shared_ptr<ActiveMQDestination>& destination);

        virtual uint8_t getOperationType() const;
        virtual void setOperationType(uint8_t operationType);

        virtual int64_t getTimeout() const;
        virtual void setTimeout(int64_t timeout);

        virtual const std::vector<boost::shared_ptr<const BrokerId> >& getBrokerPath() const;
        virtual void setBrokerPath(const std::vector<boost::shared_ptr<const BrokerId> >& brokerPath);
    };
  }
}

#endif /*DestinationInfo_h_*/
