/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#include "command/ConsumerInfo.h"

using namespace ActiveMQ::Command;

/*
 *
 *  Marshalling code for Open Wire Format for ConsumerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
bool
ConsumerInfo::isMarshalAware() const
{
    return false;
}

ConsumerInfo::ConsumerInfo()
{
    browser_ = 0;
    prefetchSize_ = 0;
    maximumPendingMessageLimit_ = 0;
    dispatchAsync_ = 0;
    selector_ = "";
    subcriptionName_ = "";
    noLocal_ = 0;
    exclusive_ = 0;
    retroactive_ = 0;
    priority_ = 0;
    networkSubscription_ = 0;
    optimizedAcknowledge_ = 0;
    noRangeAcks_ = 0;
}

int
ConsumerInfo::getCommandType() const
{
    return TYPE;
}

ConsumerInfo::~ConsumerInfo()
{
}

boost::shared_ptr<const ConsumerId> ConsumerInfo::getConsumerId() const
{
    return consumerId_;
}

void ConsumerInfo::setConsumerId(const boost::shared_ptr<ConsumerId>& consumerId)
{
    consumerId_ = consumerId;
}

bool ConsumerInfo::isBrowser() const
{
    return browser_;
}

void ConsumerInfo::setBrowser(bool browser)
{
    browser_ = browser;
}

boost::shared_ptr<const ActiveMQDestination> ConsumerInfo::getDestination() const
{
    return destination_;
}

void ConsumerInfo::setDestination(const boost::shared_ptr<ActiveMQDestination>& destination)
{
    destination_ = destination;
}

int ConsumerInfo::getPrefetchSize() const
{
    return prefetchSize_;
}

void ConsumerInfo::setPrefetchSize(int prefetchSize)
{
    prefetchSize_ = prefetchSize;
}

int ConsumerInfo::getMaximumPendingMessageLimit() const
{
    return maximumPendingMessageLimit_;
}

void ConsumerInfo::setMaximumPendingMessageLimit(int maximumPendingMessageLimit)
{
    maximumPendingMessageLimit_ = maximumPendingMessageLimit;
}

bool ConsumerInfo::isDispatchAsync() const
{
    return dispatchAsync_;
}

void ConsumerInfo::setDispatchAsync(bool dispatchAsync)
{
    dispatchAsync_ = dispatchAsync;
}

const std::string& ConsumerInfo::getSelector() const
{
    return selector_;
}

void ConsumerInfo::setSelector(const std::string& selector)
{
    selector_ = selector;
}

const std::string& ConsumerInfo::getSubcriptionName() const
{
    return subcriptionName_;
}

void ConsumerInfo::setSubcriptionName(const std::string& subcriptionName)
{
    subcriptionName_ = subcriptionName;
}

bool ConsumerInfo::isNoLocal() const
{
    return noLocal_;
}

void ConsumerInfo::setNoLocal(bool noLocal)
{
    noLocal_ = noLocal;
}

bool ConsumerInfo::isExclusive() const
{
    return exclusive_;
}

void ConsumerInfo::setExclusive(bool exclusive)
{
    exclusive_ = exclusive;
}

bool ConsumerInfo::isRetroactive() const
{
    return retroactive_;
}

void ConsumerInfo::setRetroactive(bool retroactive)
{
    retroactive_ = retroactive;
}

uint8_t ConsumerInfo::getPriority() const
{
    return priority_;
}

void ConsumerInfo::setPriority(uint8_t priority)
{
    priority_ = priority;
}

const std::vector<boost::shared_ptr<const BrokerId> >& ConsumerInfo::getBrokerPath() const
{
    return brokerPath_;
}

void ConsumerInfo::setBrokerPath(const std::vector<boost::shared_ptr<const BrokerId> >& brokerPath)
{
    brokerPath_ = brokerPath;
}

bool ConsumerInfo::isNetworkSubscription() const
{
    return networkSubscription_;
}

void ConsumerInfo::setNetworkSubscription(bool networkSubscription)
{
    networkSubscription_ = networkSubscription;
}

bool ConsumerInfo::isOptimizedAcknowledge() const
{
    return optimizedAcknowledge_;
}

void ConsumerInfo::setOptimizedAcknowledge(bool optimizedAcknowledge)
{
    optimizedAcknowledge_ = optimizedAcknowledge;
}

bool ConsumerInfo::isNoRangeAcks() const
{
    return noRangeAcks_;
}

void ConsumerInfo::setNoRangeAcks(bool noRangeAcks)
{
    noRangeAcks_ = noRangeAcks;
}
