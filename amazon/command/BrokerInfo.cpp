/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#include "command/BrokerInfo.h"

using namespace ActiveMQ::Command;

/*
 *
 *  Marshalling code for Open Wire Format for BrokerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
bool
BrokerInfo::isMarshalAware() const
{
    return false;
}

BrokerInfo::BrokerInfo()
{
    brokerURL_ = "";
    brokerName_ = "";
    slaveBroker_ = 0;
    masterBroker_ = 0;
    faultTolerantConfiguration_ = 0;
}

int
BrokerInfo::getCommandType() const
{
    return TYPE;
}

BrokerInfo::~BrokerInfo()
{
}

boost::shared_ptr<const BrokerId> BrokerInfo::getBrokerId() const
{
    return brokerId_;
}

void BrokerInfo::setBrokerId(const boost::shared_ptr<BrokerId>& brokerId)
{
    brokerId_ = brokerId;
}

const std::string& BrokerInfo::getBrokerURL() const
{
    return brokerURL_;
}

void BrokerInfo::setBrokerURL(const std::string& brokerURL)
{
    brokerURL_ = brokerURL;
}

const std::vector<boost::shared_ptr<const BrokerInfo> >& BrokerInfo::getPeerBrokerInfos() const
{
    return peerBrokerInfos_;
}

void BrokerInfo::setPeerBrokerInfos(const std::vector<boost::shared_ptr<const BrokerInfo> >& peerBrokerInfos)
{
    peerBrokerInfos_ = peerBrokerInfos;
}

const std::string& BrokerInfo::getBrokerName() const
{
    return brokerName_;
}

void BrokerInfo::setBrokerName(const std::string& brokerName)
{
    brokerName_ = brokerName;
}

bool BrokerInfo::isSlaveBroker() const
{
    return slaveBroker_;
}

void BrokerInfo::setSlaveBroker(bool slaveBroker)
{
    slaveBroker_ = slaveBroker;
}

bool BrokerInfo::isMasterBroker() const
{
    return masterBroker_;
}

void BrokerInfo::setMasterBroker(bool masterBroker)
{
    masterBroker_ = masterBroker;
}

bool BrokerInfo::isFaultTolerantConfiguration() const
{
    return faultTolerantConfiguration_;
}

void BrokerInfo::setFaultTolerantConfiguration(bool faultTolerantConfiguration)
{
    faultTolerantConfiguration_ = faultTolerantConfiguration;
}
