/*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

#ifndef BrokerInfo_h_
#define BrokerInfo_h_

#include <string>
#include <vector>
#include <exception>
#include <inttypes.h>
#include <boost/shared_ptr.hpp>

#include "command/BaseCommand.h"    
#include "BrokerId.h"
#include "BrokerInfo.h"

namespace ActiveMQ {
  namespace Command {

    /*
     *
     *  Marshalling code for Open Wire Format for BrokerInfo
     *
     *
     *  NOTE!: This file is autogenerated - do not modify!
     *         if you need to make a change, please see the Groovy scripts in the
     *         activemq-core module
     *
     */
    class BrokerInfo : public BaseCommand
    {
      private:
        boost::shared_ptr<const BrokerId> brokerId_;
        std::string brokerURL_;
        std::vector<boost::shared_ptr<const BrokerInfo> > peerBrokerInfos_;
        std::string brokerName_;
        bool slaveBroker_;
        bool masterBroker_;
        bool faultTolerantConfiguration_;

      public:
        const static int TYPE = 2;
    
      public:
        BrokerInfo();
        virtual ~BrokerInfo();
    
        virtual bool isMarshalAware() const;
        virtual int getCommandType() const;

        virtual boost::shared_ptr<const BrokerId> getBrokerId() const;
        virtual void setBrokerId(const boost::shared_ptr<BrokerId>& brokerId);

        virtual const std::string& getBrokerURL() const;
        virtual void setBrokerURL(const std::string& brokerURL);

        virtual const std::vector<boost::shared_ptr<const BrokerInfo> >& getPeerBrokerInfos() const;
        virtual void setPeerBrokerInfos(const std::vector<boost::shared_ptr<const BrokerInfo> >& peerBrokerInfos);

        virtual const std::string& getBrokerName() const;
        virtual void setBrokerName(const std::string& brokerName);

        virtual bool isSlaveBroker() const;
        virtual void setSlaveBroker(bool slaveBroker);

        virtual bool isMasterBroker() const;
        virtual void setMasterBroker(bool masterBroker);

        virtual bool isFaultTolerantConfiguration() const;
        virtual void setFaultTolerantConfiguration(bool faultTolerantConfiguration);
    };
  }
}

#endif /*BrokerInfo_h_*/
