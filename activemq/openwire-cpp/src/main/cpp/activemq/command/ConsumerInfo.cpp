/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "activemq/command/ConsumerInfo.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Marshalling code for Open Wire Format for ConsumerInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
ConsumerInfo::ConsumerInfo()
{
    this->consumerId = NULL ;
    this->browser = false ;
    this->destination = NULL ;
    this->prefetchSize = 0 ;
    this->dispatchAsync = false ;
    this->selector = NULL ;
    this->subcriptionName = NULL ;
    this->noLocal = false ;
    this->exclusive = false ;
    this->retroactive = false ;
    this->priority = 0 ;
    this->brokerPath = NULL ;
    this->networkSubscription = false ;
}

ConsumerInfo::~ConsumerInfo()
{
}

unsigned char ConsumerInfo::getDataStructureType()
{
    return ConsumerInfo::TYPE ; 
}

        
p<ConsumerId> ConsumerInfo::getConsumerId()
{
    return consumerId ;
}

void ConsumerInfo::setConsumerId(p<ConsumerId> consumerId)
{
    this->consumerId = consumerId ;
}

        
bool ConsumerInfo::getBrowser()
{
    return browser ;
}

void ConsumerInfo::setBrowser(bool browser)
{
    this->browser = browser ;
}

        
p<ActiveMQDestination> ConsumerInfo::getDestination()
{
    return destination ;
}

void ConsumerInfo::setDestination(p<ActiveMQDestination> destination)
{
    this->destination = destination ;
}

        
int ConsumerInfo::getPrefetchSize()
{
    return prefetchSize ;
}

void ConsumerInfo::setPrefetchSize(int prefetchSize)
{
    this->prefetchSize = prefetchSize ;
}

        
bool ConsumerInfo::getDispatchAsync()
{
    return dispatchAsync ;
}

void ConsumerInfo::setDispatchAsync(bool dispatchAsync)
{
    this->dispatchAsync = dispatchAsync ;
}

        
p<string> ConsumerInfo::getSelector()
{
    return selector ;
}

void ConsumerInfo::setSelector(p<string> selector)
{
    this->selector = selector ;
}

        
p<string> ConsumerInfo::getSubcriptionName()
{
    return subcriptionName ;
}

void ConsumerInfo::setSubcriptionName(p<string> subcriptionName)
{
    this->subcriptionName = subcriptionName ;
}

        
bool ConsumerInfo::getNoLocal()
{
    return noLocal ;
}

void ConsumerInfo::setNoLocal(bool noLocal)
{
    this->noLocal = noLocal ;
}

        
bool ConsumerInfo::getExclusive()
{
    return exclusive ;
}

void ConsumerInfo::setExclusive(bool exclusive)
{
    this->exclusive = exclusive ;
}

        
bool ConsumerInfo::getRetroactive()
{
    return retroactive ;
}

void ConsumerInfo::setRetroactive(bool retroactive)
{
    this->retroactive = retroactive ;
}

        
char ConsumerInfo::getPriority()
{
    return priority ;
}

void ConsumerInfo::setPriority(char priority)
{
    this->priority = priority ;
}

        
array<BrokerId> ConsumerInfo::getBrokerPath()
{
    return brokerPath ;
}

void ConsumerInfo::setBrokerPath(array<BrokerId> brokerPath)
{
    this->brokerPath = brokerPath ;
}

        
bool ConsumerInfo::getNetworkSubscription()
{
    return networkSubscription ;
}

void ConsumerInfo::setNetworkSubscription(bool networkSubscription)
{
    this->networkSubscription = networkSubscription ;
}

int ConsumerInfo::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> writer) throw (IOException)
{
    int size = 0 ;

    size += marshaller->marshalInt(commandId, mode, writer) ;
    size += marshaller->marshalBoolean(responseRequired, mode, writer) ; 
    size += marshaller->marshalObject(consumerId, mode, writer) ; 
    size += marshaller->marshalBoolean(browser, mode, writer) ; 
    size += marshaller->marshalObject(destination, mode, writer) ; 
    size += marshaller->marshalInt(prefetchSize, mode, writer) ; 
    size += marshaller->marshalInt(maximumPendingMessageLimit, mode, writer) ; 
    size += marshaller->marshalBoolean(dispatchAsync, mode, writer) ; 
    size += marshaller->marshalString(selector, mode, writer) ; 
    size += marshaller->marshalString(subcriptionName, mode, writer) ; 
    size += marshaller->marshalBoolean(noLocal, mode, writer) ; 
    size += marshaller->marshalBoolean(exclusive, mode, writer) ; 
    size += marshaller->marshalBoolean(retroactive, mode, writer) ; 
    size += marshaller->marshalByte(priority, mode, writer) ; 
    size += marshaller->marshalObjectArray(brokerPath, mode, writer) ; 
    size += marshaller->marshalObject(additionalPredicate, mode, writer) ; 
    size += marshaller->marshalBoolean(networkSubscription, mode, writer) ; 
    return size ;
}

void ConsumerInfo::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> reader) throw (IOException)
{
    commandId = marshaller->unmarshalInt(mode, reader) ;
    responseRequired = marshaller->unmarshalBoolean(mode, reader) ; 
    consumerId = p_cast<ConsumerId>(marshaller->unmarshalObject(mode, reader)) ; 
    browser = (marshaller->unmarshalBoolean(mode, reader)) ; 
    destination = p_cast<ActiveMQDestination>(marshaller->unmarshalObject(mode, reader)) ; 
    prefetchSize = (marshaller->unmarshalInt(mode, reader)) ; 
    maximumPendingMessageLimit = (marshaller->unmarshalInt(mode, reader)) ; 
    dispatchAsync = (marshaller->unmarshalBoolean(mode, reader)) ; 
    selector = p_cast<string>(marshaller->unmarshalString(mode, reader)) ; 
    subcriptionName = p_cast<string>(marshaller->unmarshalString(mode, reader)) ; 
    noLocal = (marshaller->unmarshalBoolean(mode, reader)) ; 
    exclusive = (marshaller->unmarshalBoolean(mode, reader)) ; 
    retroactive = (marshaller->unmarshalBoolean(mode, reader)) ; 
    priority = (marshaller->unmarshalByte(mode, reader)) ; 
    brokerPath = array_cast<BrokerId>(marshaller->unmarshalObjectArray(mode, reader)) ; 
    additionalPredicate = p_cast<BooleanExpression>(marshaller->unmarshalObject(mode, reader)) ; 
    networkSubscription = (marshaller->unmarshalBoolean(mode, reader)) ; 
}
