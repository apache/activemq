/*
* Copyright 2006 The Apache Software Foundation or its licensors, as
* applicable.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "activemq/command/TransactionInfo.hpp"

using namespace apache::activemq::command;

/*
 *
 *  Marshalling code for Open Wire Format for TransactionInfo
 *
 *
 *  NOTE!: This file is autogenerated - do not modify!
 *         if you need to make a change, please see the Groovy scripts in the
 *         activemq-core module
 *
 */
TransactionInfo::TransactionInfo()
{
    this->connectionId = NULL ;
    this->transactionId = NULL ;
    this->type = 0 ;
}

TransactionInfo::~TransactionInfo()
{
}

unsigned char TransactionInfo::getDataStructureType()
{
    return TransactionInfo::TYPE ; 
}

        
p<ConnectionId> TransactionInfo::getConnectionId()
{
    return connectionId ;
}

void TransactionInfo::setConnectionId(p<ConnectionId> connectionId)
{
    this->connectionId = connectionId ;
}

        
p<TransactionId> TransactionInfo::getTransactionId()
{
    return transactionId ;
}

void TransactionInfo::setTransactionId(p<TransactionId> transactionId)
{
    this->transactionId = transactionId ;
}

        
char TransactionInfo::getType()
{
    return type ;
}

void TransactionInfo::setType(char type)
{
    this->type = type ;
}

int TransactionInfo::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> writer) throw (IOException)
{
    int size = 0 ;

    size += marshaller->marshalInt(commandId, mode, writer) ;
    size += marshaller->marshalBoolean(responseRequired, mode, writer) ; 
    size += marshaller->marshalObject(connectionId, mode, writer) ; 
    size += marshaller->marshalObject(transactionId, mode, writer) ; 
    size += marshaller->marshalByte(type, mode, writer) ; 
    return size ;
}

void TransactionInfo::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> reader) throw (IOException)
{
    commandId = marshaller->unmarshalInt(mode, reader) ;
    responseRequired = marshaller->unmarshalBoolean(mode, reader) ; 
    connectionId = p_cast<ConnectionId>(marshaller->unmarshalObject(mode, reader)) ; 
    transactionId = p_cast<TransactionId>(marshaller->unmarshalObject(mode, reader)) ; 
    type = (marshaller->unmarshalByte(mode, reader)) ; 
}
