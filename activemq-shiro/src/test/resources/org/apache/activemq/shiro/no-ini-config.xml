<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- this file can only be parsed using the xbean-spring library -->
<!-- START SNIPPET: example -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <broker xmlns="http://activemq.apache.org/schema/core"
            useJmx="false" persistent="false" populateJMSXUserID="true">

        <destinations>
            <queue physicalName="TEST.Q"/>
        </destinations>

        <transportConnectors>
            <transportConnector name="default" uri="tcp://0.0.0.0:61616"/>
        </transportConnectors>

        <plugins>

            <bean id="shiroPlugin" class="org.apache.activemq.shiro.ShiroPlugin"
                  xmlns="http://www.springframework.org/schema/beans">
                <!-- This configuration doesn't rely on an INI file for config, and expects that Shiro is configured
                     entirely within Spring.  See the Shiro securityManager bean below. -->
                <property name="securityManager" ref="securityManager"/>
            </bean>

        </plugins>
    </broker>

    <bean id="securityManager" class="org.apache.shiro.mgt.DefaultSecurityManager">
        <!-- Do not use this cache manager in a clustered broker setup.  If your broker is clustered, you should
            configure a cluster-aware CacheManager, e.g. Hazelcast, Terracotta+Ehcache, etc. -->
        <property name="cacheManager">
            <bean class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
        </property>
        <property name="realms">
            <list>
                <!-- Replace this with the real realm you're going to use that accesses your security data store: -->
                <bean id="myRealm" class="org.apache.shiro.realm.text.TextConfigurationRealm">
                    <property name="userDefinitions">
                        <value>
                            system = manager,system
                        </value>
                    </property>
                    <property name="roleDefinitions">
                        <value>
                            system = *
                        </value>
                    </property>
                </bean>
                <!-- Add other realms if necessary -->
            </list>
        </property>
    </bean>
    <bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>
