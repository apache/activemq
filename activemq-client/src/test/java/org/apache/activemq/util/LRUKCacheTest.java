package org.apache.activemq.util;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

public class LRUKCacheTest {

    protected static final Logger LOG = LoggerFactory.getLogger(LRUKCacheTest.class);

    @Test
    public void testPut(){
        LRUKCache<Integer, Integer> lrukCache = new LRUKCache<>();
        int[] array = {90, 10, 40, 79, 39, 54, 53, 18, 61, 60, 63, 80, 89, 20, 78, 44, 76, 25, 29, 57};
        for (int i = 0; i < array.length; i++) {
            lrukCache.put(array[i], array[i]);
        }
    }

    @Test
    public void testGet(){
        LRUKCache<Integer, Integer> lrukCache = new LRUKCache<>();
        int[] array = {90, 10, 40, 79, 39, 54, 53, 18, 61, 60, 63, 80, 89, 20, 78, 44, 76, 25, 29, 57};

        for (int i = 0; i < array.length; i++) {
            lrukCache.put(array[i], array[i]);
        }

        for (int i = 0; i < array.length; i++) {
            int j = 7;
            while (j > 0){
                Assert.assertEquals((int)lrukCache.get(array[i]), array[i]);
                Assert.assertTrue(lrukCache.containsKey(array[i]));
                Assert.assertTrue(lrukCache.containsValue(array[i]));
                j--;
            }
        }
    }

    @Test
    public void testRemove(){
        LRUKCache<Integer, Integer> lrukCache = new LRUKCache<>();
        int[] array = {90, 10, 40, 79, 39, 54, 53, 18, 61, 60, 63, 80, 89, 20, 78, 44, 76, 25, 29, 57};

        for (int i = 0; i < array.length; i++) {
            lrukCache.put(array[i], array[i]);
        }

        for (int i = 0; i < array.length; i++) {
            int j = 7;
            while (j > 0){
                Assert.assertEquals((int)lrukCache.get(array[i]), array[i]);
                j--;
            }
        }

        for (int i = 0; i < array.length; i++) {
            Assert.assertTrue(lrukCache.containsValue(array[i]));
            lrukCache.remove(array[i]);
            Assert.assertTrue(!lrukCache.containsValue(array[i]));
        }
    }

    @Test
    public void testEvict1() {
        LRUKCache<Integer, Integer> lrukCache = new LRUKCache<>(1000, 2);
        int[] array = {};

        for (int i = 0; i < 500; i++) {
            lrukCache.put(array[i], array[i]);
        }

        for (int i = 0; i < 500; i++) {
            int j = 2;
            while (j > 0){
                lrukCache.get(array[i]);
                j--;
            }
        }

        for (int i = 500; i < 1000; i++) {
            lrukCache.put(array[i], array[i]);
        }

        for(int i = 0; i < 1000; i++) {
           Assert.assertTrue(lrukCache.containsKey(array[i]));
        }
    }


}
