################################################################################
# Apache JMeter Property file
################################################################################

# ------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#Preferred GUI language. Comment out to use the JVM default locale's language.
#language=de

# Netscape HTTP Cookie file
cookies=cookies

# Authorization
authorization=authorization

#Working directory
user.dir=.

# XML Reader(Parser) - Must implement SAX 2 specs
xml.parser=org.apache.xerces.parsers.SAXParser

#Classname of the ssl provider to be used (to enable testing of https urls)
#And the package name where Stream Handlers can be found
#These provided defaults can be uncommented, and they will work if you are using
#Sun's JSSE implementation.

ssl.provider=com.sun.net.ssl.internal.ssl.Provider
#ssl.provider=iaik.security.jsse.provider.IAIKJSSEProvider
ssl.pkgs=com.sun.net.ssl.internal.www.protocol

#The location of the truststore (trusted certificates) and keystore ( if other than the default.
#you can uncomment this and change the path to the correct location.
#javax.net.ssl.trustStore=/path/to/cacerts
#javax.net.ssl.keyStore=/path/to/keystore

#The password to your keystore
#javax.net.ssl.keyStorePassword=password

#Alternative protocol of the ssl provider for IAIK JCE + iSaSiLk
#You can also override IAIK specific Providers as well.

#ssl.pkgs=iaik.protocol
#ssl.provider=com.mycompany.security.provider.SmartProvider
#iaik.provider=com.mycompany.security.provider.SmartSSLProvider

#Flag for whether to output debug messages to System.err
#To enable it, set the value to "all"  Note, for it to work with
#JSSE, it needs to be done from the Java command (i.e. -Djavax.net.debug=all)
javax.net.debug=all

#Classname of the Swing default UI
#Installed Look and Feel classes on Windows are:
#  Metal   = javax.swing.plaf.metal.MetalLookAndFeel
#  Motif   = com.sun.java.swing.plaf.motif.MotifLookAndFeel
#  Windows = com.sun.java.swing.plaf.windows.WindowsLookAndFeel
jmeter.laf=javax.swing.plaf.metal.MetalLookAndFeel

#icons -> moved to program code
#timer.tree.icon=timer.gif
#listener.tree.icon=ear.gif
#bench.tree.icon=clipboard.gif
#thread.tree.icon=thread.gif
#control.tree.icon=knob.gif
#plan.tree.icon=beaker.gif
#config.tree.icon=leafnode.gif

# Remote Hosts - comma delimited
remote_hosts=127.0.0.1
#remote_hosts:localhost:1099,localhost:2010

# RMI port to be used by the server
#server_port=1099

#Components to not display in JMeter GUI
not_in_menu=Remote Method Configuration,JNDI Configuration,JNDI Lookup Configuration,JNDI Request,Default Controller,org.apache.jmeter.control.DynamicController, org.apache.jmeter.protocol.http.control.Cookie,org.apache.jmeter.protocol.http.control.Authorization,org.apache.jmeter.config.LoginConfig,Header,org.apache.jmeter.protocol.http.config.MultipartUrlConfig

#---------------------------------------------------------------------------
#         Logging Configuration
#---------------------------------------------------------------------------

# Note: JMeter uses Avalon LogKit

# Logging Format
# see http://avalon.apache.org/logkit/api/org/apache/log/format/PatternFormatter.html
#
# Default format:
#log_format=%{time:yyyy/MM/dd HH:mm:ss} %5.5{priority} - %{category}: %{message} %{throwable}
# \n is automatically added to the end of the string
#
# Predefined formats in the JMeter LoggingManager:
#log_format_type=default
#log_format_type=thread_prefix
#log_format_type=thread_suffix
# default is as above
# thread_prefix adds the thread name as a prefix to the category
# thread_suffix adds the thread name as a suffix to the category
# Note that thread name is not included by default, as it requires extra processing.
#
# To change the logging format, define either log_format_type or log_format
# If both are defined, the type takes precedence
# Note that these properties cannot be defined using the -J or -D JMeter
# command-line flags, as the format will have already been determined by then
# However, they can be defined as JVM properties

#Logging levels for the logging categories in JMeter.  Correct values are FATAL_ERROR, ERROR, WARN, INFO, and DEBUG
# To set the log level for a package or individual class, use:
# log_level.[package_name].[classname]=[PRIORITY_LEVEL]
# But omit "org.apache" from the package name.  The classname is optional.  Further examples below.

log_level.jmeter=INFO
log_level.jmeter.junit=DEBUG
#log_level.jmeter.control=DEBUG
#log_level.jmeter.testbeans=DEBUG
#log_level.jmeter.engine=DEBUG
#log_level.jmeter.threads=DEBUG
#log_level.jmeter.gui=WARN
#log_level.jmeter.testelement=DEBUG
#log_level.jmeter.util=WARN
#log_level.jmeter.util.classfinder=WARN
#log_level.jmeter.test=DEBUG
#log_level.jmeter.protocol.http=DEBUG
#log_level.jmeter.protocol.ftp=WARN
#log_level.jmeter.protocol.jdbc=DEBUG
#log_level.jmeter.protocol.java=WARN
#log_level.jmeter.testelements.property=DEBUG
log_level.jorphan=INFO
	

#Log file for log messages.
# You can specify a different log file for different categories via:
# log_file.[category]=[filename]
# category is equivalent to the package/class names described above

# Combined log file (for jmeter and jorphan)
log_file=jmeter.log
# To redirect logging to standard output, try the following:
# (it will probably report an error, but output will be to stdout)
#log_file=

# Or define separate logs if required:
#log_file.jorphan=jorphan.log
#log_file.jmeter=jmeter.log

#---------------------------------------------------------------------------
# HTTPClient configuration
#---------------------------------------------------------------------------

# set the socket timeout
#httpclient.timeout=0

# Set the http version (defaults to 1.1)
#httpclient.version=1.0

# Sample logging levels for HttpClient
# Note that full category names are used, i.e. must include the org.apache.
# Info level produces no output:
#log_level.org.apache.commons.logging=debug
# Might be useful:
#org.apache.commons.httpclient.Authenticator=trace 

# wire debug produces a lot of output; consider using separate file:
#log_level.httpclient.wire=debug
#log_file.httpclient=httpclient.log

# Further logging configuration
# Excalibur logging provides the facility to configure logging using
# configuration files written in XML. This allows for such features as
# log file rotation which are not supported directly by JMeter.
#
# If such a file specified, it will be applied to the current logging
# hierarchy when that has been created.
# 
#log_config=logkit.xml

#---------------------------------------------------------------------------
# Results file configuration
#---------------------------------------------------------------------------

# This section helps determine how result data will be saved.
# The commented out values are the defaults.

# legitimate values: xml, csv, db.  Only xml and csv are currently supported.
jmeter.save.saveservice.output_format=xml


# true when field should be saved; false otherwise

# assertion_results_failure_message only affects CSV output
#jmeter.save.saveservice.assertion_results_failure_message=true
#jmeter.save.saveservice.data_type=true
#jmeter.save.saveservice.label=true
#jmeter.save.saveservice.response_code=true
#jmeter.save.saveservice.response_data=false
#jmeter.save.saveservice.response_message=true
#jmeter.save.saveservice.successful=true
#jmeter.save.saveservice.thread_name=true
#jmeter.save.saveservice.time=true

# legitimate values: none, ms, or a format suitable for SimpleDateFormat
#jmeter.save.saveservice.timestamp_format=ms
#jmeter.save.saveservice.timestamp_format=MM/dd/yy HH:mm:ss

# legitimate values: none, first, all
#jmeter.save.saveservice.assertion_results=none

# For use with Comma-separated value (CSV) files or other formats
# where the fields' values are separated by specified delimiters.
#jmeter.save.saveservice.default_delimiter=,
#jmeter.save.saveservice.print_field_names=true

# File that holds a record of name changes for backward compatibility issues
upgrade_properties=/bin/upgrade.properties

# If the proxy detects a gap of at least 1s (default) between HTTP requests,
# it assumes that the user has clicked a new URL
#proxy.pause=1000

# Add numeric prefix to Sampler names (default false)
#proxy.number.requests=true
#
# Define the HTML parser to be used.
# Default parser:
#htmlParser.className=org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser
# Other parsers:
#htmlParser.className=org.apache.jmeter.protocol.http.parser.JTidyHTMLParser
#htmlParser.className=org.apache.jmeter.protocol.http.parser.RegexpHTMLParser

# Put the start time stamp in logs instead of the end
#sampleresult.timestamp.start=true

# The encoding to be used if none is provided (default ISO-8859-1)
#sampleresult.default.encoding=ISO-8859-1

# Remote batching support
# default is Standard, which returns each sample
# Hold retains samples until end of test (may need lots of memory)
# Batch returns samples in batches
# hold_samples was originally defined as a separate property,
# but can now also be defined using remote.mode
#mode=Standard
#mode=Batch
#mode=Hold
#hold_samples=true
#num_sample_threshold=100
#time_threshold=60000

# Turn expert mode on/off: expert mode will show expert-mode beans and properties
#jmeter.expertMode=true

# To set the Monitor Health Visualiser buffer size, enter the desired value
# monitor.buffer.size=800

#TCP sampler
# The default handler class
#tcp.handler=TCPClientImpl
#
# eolByte = byte value for end of line
#tcp.eolByte=0
#
# status.prefix and suffix = strings that enclose the status response code
#tcp.status.prefix=Status=
#tcp.status.suffix=.
#
# status.properties = property file to convert codes to messages
#tcp.status.properties=mytestfiles/tcpstatus.properties

# Summariser settings
#
# Define the following property to automatically start a summariser with that name
#summariser.name=summary
#
# interval between summaries (in seconds) default 3 minutes
#summariser.interval=180
#
# Write messages to log file
#summariser.log=true
#
# Write messages to System.out
#summariser.out=true

# BeanShell Server properties
#
# Define the port number as non-zero to start the server on that port
#beanshell.server.port=0
#
# Define the server initialisation file
#beanshell.server.file=initial.bsh
#
# Define the intialisation files for BeanShell Sampler and Function elements
#beanshell.sampler.init=BeanShellSampler.bshrc
#beanshell.function.init=BeanShellFunction.bshrc
#beanshell.assertion.init=etc

#TestBeanGui
#
#propertyEditorSearchPath=null

#JMeterUtils
#
#search_paths=null

# MailerModel settings
#
# Number of successful samples before a message is sent
#mailer.successlimit=2
#
# Number of failed samples before a message is sent
#mailer.failurelimit=2

# CSVRead delimiter setting (default ",")
# Make sure that there are no trailing spaces or tabs after the delimiter
# characters, or these will be included in the list of valid delimiters
#csvread.delimiter=,
#csvread.delimiter=;
#csvread.delimiter=!
#csvread.delimiter=~
# The following line has a tab after the =
#csvread.delimiter=	

# CookieManager behaviour - should cookies with null/empty values be deleted?
# Default is true. Use false to revert to original behaviour
#CookieManager.delete_null_cookies=true

# (2.0.3) JMeterThread behaviour has been changed to set the started flag before
# the controllers are initialised. This is so controllers can access variables earlier. 
# In case this causes problems, the previous behaviour can be restored by uncommenting
# the following line.
#jmeterthread.startearlier=false
#Producer TCP sampler
# The default handler class
#tcp.prod.handler=ProducerClientImpl
#
# eolByte = byte value for end of line
#tcp.prod.eolByte=0
